<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sentry</name>
    </assembly>
    <members>
        <member name="T:Sentry.AttachmentType">
            <summary>
            Attachment type.
            </summary>
        </member>
        <member name="F:Sentry.AttachmentType.Default">
            <summary>
            Standard attachment without special meaning.
            </summary>
        </member>
        <member name="F:Sentry.AttachmentType.Minidump">
            <summary>
            Minidump file that creates an error event and is symbolicated.
            The file should start with the <code>MDMP</code> magic bytes.
            </summary>
        </member>
        <member name="F:Sentry.AttachmentType.AppleCrashReport">
            <summary>
            Apple crash report file that creates an error event and is symbolicated.
            </summary>
        </member>
        <member name="F:Sentry.AttachmentType.UnrealContext">
            <summary>
            XML file containing UE4 crash meta data.
            During event ingestion, event contexts and extra fields are extracted from this file.
            </summary>
        </member>
        <member name="F:Sentry.AttachmentType.UnrealLogs">
            <summary>
            Plain-text log file obtained from UE4 crashes.
            During event ingestion, the last logs are extracted into event breadcrumbs.
            </summary>
        </member>
        <member name="T:Sentry.Attachment">
            <summary>
            Sentry attachment.
            </summary>
        </member>
        <member name="P:Sentry.Attachment.Type">
            <summary>
            Attachment type.
            </summary>
        </member>
        <member name="P:Sentry.Attachment.Content">
            <summary>
            Attachment content.
            </summary>
        </member>
        <member name="P:Sentry.Attachment.FileName">
            <summary>
            Attachment file name.
            </summary>
        </member>
        <member name="P:Sentry.Attachment.ContentType">
            <summary>
            Attachment content type.
            </summary>
        </member>
        <member name="M:Sentry.Attachment.#ctor(Sentry.AttachmentType,Sentry.IAttachmentContent,System.String,System.String)">
            <summary>
            Initializes an instance of <see cref="T:Sentry.Attachment"/>.
            </summary>
        </member>
        <member name="T:Sentry.Breadcrumb">
            <summary>
            Series of application events.
            </summary>
        </member>
        <member name="P:Sentry.Breadcrumb.Timestamp">
            <summary>
            A timestamp representing when the breadcrumb occurred.
            </summary>
            <remarks>
            This can be either an ISO datetime string, or a Unix timestamp.
            </remarks>
        </member>
        <member name="P:Sentry.Breadcrumb.Message">
            <summary>
            If a message is provided, it’s rendered as text and the whitespace is preserved.
            Very long text might be abbreviated in the UI.
            </summary>
        </member>
        <member name="P:Sentry.Breadcrumb.Type">
            <summary>
            The type of breadcrumb.
            </summary>
            <remarks>
            The default type is default which indicates no specific handling.
            Other types are currently http for HTTP requests and navigation for navigation events.
            </remarks>
        </member>
        <member name="P:Sentry.Breadcrumb.Data">
            <summary>
            Data associated with this breadcrumb.
            </summary>
            <remarks>
            Contains a sub-object whose contents depend on the breadcrumb type.
            Additional parameters that are unsupported by the type are rendered as a key/value table.
            </remarks>
        </member>
        <member name="P:Sentry.Breadcrumb.Category">
            <summary>
            Dotted strings that indicate what the crumb is or where it comes from.
            </summary>
            <remarks>
            Typically it’s a module name or a descriptive string.
            For instance aspnet.mvc.filter could be used to indicate that it came from an Action Filter.
            </remarks>
        </member>
        <member name="P:Sentry.Breadcrumb.Level">
            <summary>
            The level of the event.
            </summary>
            <remarks>
            Levels are used in the UI to emphasize and de-emphasize the crumb.
            </remarks>
        </member>
        <member name="M:Sentry.Breadcrumb.#ctor(System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.String,Sentry.BreadcrumbLevel)">
            <summary>
            Initializes a new instance of the <see cref="T:Sentry.Breadcrumb"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="type">The type.</param>
            <param name="data">The data.</param>
            <param name="category">The category.</param>
            <param name="level">The level.</param>
        </member>
        <member name="M:Sentry.Breadcrumb.#ctor(System.Nullable{System.DateTimeOffset},System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.String,Sentry.BreadcrumbLevel)">
            <summary>
            Initializes a new instance of the <see cref="T:Sentry.Breadcrumb"/> class.
            </summary>
            <param name="timestamp"></param>
            <param name="message">The message.</param>
            <param name="type">The type.</param>
            <param name="data">The data.</param>
            <param name="category">The category.</param>
            <param name="level">The level.</param>
        </member>
        <member name="M:Sentry.Breadcrumb.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc />
        </member>
        <member name="M:Sentry.Breadcrumb.FromJson(System.Text.Json.JsonElement)">
            <summary>
            Parses from JSON.
            </summary>
        </member>
        <member name="T:Sentry.BreadcrumbLevel">
            <summary>
            The level of the Breadcrumb.
            </summary>
        </member>
        <member name="F:Sentry.BreadcrumbLevel.Debug">
            <summary>
            Debug level.
            </summary>
        </member>
        <member name="F:Sentry.BreadcrumbLevel.Info">
            <summary>
            Information level.
            </summary>
            <remarks>
            This is value 0, hence, default.
            </remarks>
        </member>
        <member name="F:Sentry.BreadcrumbLevel.Warning">
            <summary>
            Warning breadcrumb level.
            </summary>
        </member>
        <member name="F:Sentry.BreadcrumbLevel.Error">
            <summary>
            Error breadcrumb level.
            </summary>
        </member>
        <member name="F:Sentry.BreadcrumbLevel.Critical">
            <summary>
            Critical breadcrumb level.
            </summary>
        </member>
        <member name="T:Sentry.Constants">
            <summary>
            Constant values.
            </summary>
        </member>
        <member name="F:Sentry.Constants.DisableSdkDsnValue">
            <summary>
            Empty string disables the SDK.
            </summary>
            <see href="https://develop.sentry.dev/sdk/overview/#usage-for-end-users"/>
        </member>
        <member name="F:Sentry.Constants.DefaultMaxBreadcrumbs">
            <summary>
            Default maximum number of breadcrumbs to hold in memory.
            </summary>
        </member>
        <member name="F:Sentry.Constants.ProtocolVersion">
            <summary>
            Protocol version.
            </summary>
        </member>
        <member name="F:Sentry.Constants.Platform">
            <summary>
            Platform key that defines an events is coming from any .NET implementation.
            </summary>
        </member>
        <member name="T:Sentry.DeduplicateMode">
            <summary>
            Possible modes of dropping events that are detected to be duplicates.
            </summary>
        </member>
        <member name="F:Sentry.DeduplicateMode.SameEvent">
            <summary>
            Same event instance. Assumes no object reuse/pooling.
            </summary>
        </member>
        <member name="F:Sentry.DeduplicateMode.SameExceptionInstance">
            <summary>
            An exception that was captured twice.
            </summary>
        </member>
        <member name="F:Sentry.DeduplicateMode.InnerException">
            <summary>
            An exception already captured exists as an inner exception.
            </summary>
        </member>
        <member name="F:Sentry.DeduplicateMode.AggregateException">
            <summary>
            An exception already captured is part of the aggregate exception.
            </summary>
        </member>
        <member name="F:Sentry.DeduplicateMode.All">
            <summary>
            All modes combined.
            </summary>
        </member>
        <member name="T:Sentry.DefaultSentryScopeStateProcessor">
            <summary>
            Defines the logic for applying state onto a scope.
            </summary>
        </member>
        <member name="M:Sentry.DefaultSentryScopeStateProcessor.Apply(Sentry.Scope,System.Object)">
            <summary>
            Applies state onto a scope.
            </summary>
        </member>
        <member name="T:Sentry.Dsn">
            <summary>
            The Data Source Name of a given project in Sentry.
            </summary>
            <remarks>
            <see href="https://develop.sentry.dev/sdk/overview/#parsing-the-dsn"/>
            </remarks>
        </member>
        <member name="P:Sentry.Dsn.Source">
            <summary>
            Source DSN string.
            </summary>
        </member>
        <member name="P:Sentry.Dsn.ProjectId">
            <summary>
            The project ID which the authenticated user is bound to.
            </summary>
        </member>
        <member name="P:Sentry.Dsn.Path">
            <summary>
            An optional path of which Sentry is hosted.
            </summary>
        </member>
        <member name="P:Sentry.Dsn.SecretKey">
            <summary>
            The optional secret key to authenticate the SDK.
            </summary>
        </member>
        <member name="P:Sentry.Dsn.PublicKey">
            <summary>
            The required public key to authenticate the SDK.
            </summary>
        </member>
        <member name="P:Sentry.Dsn.ApiBaseUri">
            <summary>
            Sentry API's base URI.
            </summary>
        </member>
        <member name="T:Sentry.DsnAttribute">
            <summary>
            A way to configure the DSN via attribute defined at the entry-assembly.
            </summary>
        </member>
        <member name="P:Sentry.DsnAttribute.Dsn">
            <summary>
            The string DSN or empty string to turn the SDK off.
            </summary>
        </member>
        <member name="M:Sentry.DsnAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:Sentry.DsnAttribute" />.
            </summary>
        </member>
        <member name="T:Sentry.Protocol.Envelopes.Envelope">
            <summary>
            Envelope.
            </summary>
        </member>
        <member name="P:Sentry.Protocol.Envelopes.Envelope.Header">
            <summary>
            Header associated with the envelope.
            </summary>
        </member>
        <member name="P:Sentry.Protocol.Envelopes.Envelope.Items">
            <summary>
            Envelope items.
            </summary>
        </member>
        <member name="M:Sentry.Protocol.Envelopes.Envelope.#ctor(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Collections.Generic.IReadOnlyList{Sentry.Protocol.Envelopes.EnvelopeItem})">
            <summary>
            Initializes an instance of <see cref="T:Sentry.Protocol.Envelopes.Envelope"/>.
            </summary>
        </member>
        <member name="M:Sentry.Protocol.Envelopes.Envelope.TryGetEventId">
            <summary>
            Attempts to extract the value of "sentry_id" header if it's present.
            </summary>
        </member>
        <member name="M:Sentry.Protocol.Envelopes.Envelope.SerializeAsync(System.IO.Stream,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Sentry.Protocol.Envelopes.Envelope.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Sentry.Protocol.Envelopes.Envelope.FromEvent(Sentry.SentryEvent,System.Collections.Generic.IReadOnlyCollection{Sentry.Attachment},Sentry.SessionUpdate)">
            <summary>
            Creates an envelope that contains a single event.
            </summary>
        </member>
        <member name="M:Sentry.Protocol.Envelopes.Envelope.FromUserFeedback(Sentry.UserFeedback)">
            <summary>
            Creates an envelope that contains a single user feedback.
            </summary>
        </member>
        <member name="M:Sentry.Protocol.Envelopes.Envelope.FromTransaction(Sentry.Transaction)">
            <summary>
            Creates an envelope that contains a single transaction.
            </summary>
        </member>
        <member name="M:Sentry.Protocol.Envelopes.Envelope.FromSession(Sentry.SessionUpdate)">
            <summary>
            Creates an envelope that contains a session update.
            </summary>
        </member>
        <member name="M:Sentry.Protocol.Envelopes.Envelope.DeserializeAsync(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Deserializes envelope from stream.
            </summary>
        </member>
        <member name="T:Sentry.Protocol.Envelopes.EnvelopeItem">
            <summary>
            Envelope item.
            </summary>
        </member>
        <member name="P:Sentry.Protocol.Envelopes.EnvelopeItem.Header">
            <summary>
            Header associated with this envelope item.
            </summary>
        </member>
        <member name="P:Sentry.Protocol.Envelopes.EnvelopeItem.Payload">
            <summary>
            Item payload.
            </summary>
        </member>
        <member name="M:Sentry.Protocol.Envelopes.EnvelopeItem.#ctor(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},Sentry.Protocol.Envelopes.ISerializable)">
            <summary>
            Initializes an instance of <see cref="T:Sentry.Protocol.Envelopes.EnvelopeItem"/>.
            </summary>
        </member>
        <member name="M:Sentry.Protocol.Envelopes.EnvelopeItem.TryGetType">
            <summary>
            Tries to get item type.
            </summary>
        </member>
        <member name="M:Sentry.Protocol.Envelopes.EnvelopeItem.TryGetLength">
            <summary>
            Tries to get payload length.
            </summary>
        </member>
        <member name="M:Sentry.Protocol.Envelopes.EnvelopeItem.SerializeAsync(System.IO.Stream,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Sentry.Protocol.Envelopes.EnvelopeItem.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Sentry.Protocol.Envelopes.EnvelopeItem.FromEvent(Sentry.SentryEvent)">
            <summary>
            Creates an envelope item from an event.
            </summary>
        </member>
        <member name="M:Sentry.Protocol.Envelopes.EnvelopeItem.FromUserFeedback(Sentry.UserFeedback)">
            <summary>
            Creates an envelope item from user feedback.
            </summary>
        </member>
        <member name="M:Sentry.Protocol.Envelopes.EnvelopeItem.FromTransaction(Sentry.Transaction)">
            <summary>
            Creates an envelope item from transaction.
            </summary>
        </member>
        <member name="M:Sentry.Protocol.Envelopes.EnvelopeItem.FromSession(Sentry.SessionUpdate)">
            <summary>
            Creates an envelope item from a session update.
            </summary>
        </member>
        <member name="M:Sentry.Protocol.Envelopes.EnvelopeItem.FromAttachment(Sentry.Attachment)">
            <summary>
            Creates an envelope item from attachment.
            </summary>
        </member>
        <member name="M:Sentry.Protocol.Envelopes.EnvelopeItem.DeserializeAsync(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Deserializes envelope item from stream.
            </summary>
        </member>
        <member name="T:Sentry.Protocol.Envelopes.ISerializable">
            <summary>
            Represents a serializable entity.
            </summary>
        </member>
        <member name="M:Sentry.Protocol.Envelopes.ISerializable.SerializeAsync(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Serializes the object to a stream.
            </summary>
        </member>
        <member name="T:Sentry.Protocol.Envelopes.JsonSerializable">
            <summary>
            Represents an object serializable in JSON format.
            </summary>
        </member>
        <member name="P:Sentry.Protocol.Envelopes.JsonSerializable.Source">
            <summary>
            Source object.
            </summary>
        </member>
        <member name="M:Sentry.Protocol.Envelopes.JsonSerializable.#ctor(Sentry.IJsonSerializable)">
            <summary>
            Initializes an instance of <see cref="T:Sentry.Protocol.Envelopes.JsonSerializable"/>.
            </summary>
        </member>
        <member name="M:Sentry.Protocol.Envelopes.JsonSerializable.SerializeAsync(System.IO.Stream,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Sentry.Protocol.Envelopes.StreamSerializable">
            <summary>
            Represents an object which is already serialized as a stream.
            </summary>
        </member>
        <member name="P:Sentry.Protocol.Envelopes.StreamSerializable.Source">
            <summary>
            Source stream.
            </summary>
        </member>
        <member name="M:Sentry.Protocol.Envelopes.StreamSerializable.#ctor(System.IO.Stream)">
            <summary>
            Initializes an instance of <see cref="T:Sentry.Protocol.Envelopes.StreamSerializable"/>.
            </summary>
        </member>
        <member name="M:Sentry.Protocol.Envelopes.StreamSerializable.SerializeAsync(System.IO.Stream,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Sentry.Protocol.Envelopes.StreamSerializable.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Sentry.Protocol.Mechanism">
            <summary>
            Sentry Exception Mechanism.
            </summary>
            <remarks>
            The exception mechanism is an optional field residing in the Exception Interface.
            It carries additional information about the way the exception was created on the target system.
            This includes general exception values obtained from operating system or runtime APIs, as well as mechanism-specific values.
            </remarks>
            <see href="https://develop.sentry.dev/sdk/event-payloads/exception/#exception-mechanism"/>
        </member>
        <member name="F:Sentry.Protocol.Mechanism.HandledKey">
            <summary>
            Keys found inside of the Exception Dictionary to inform if the exception was handled and which mechanism tracked it.
            </summary>
        </member>
        <member name="F:Sentry.Protocol.Mechanism.MechanismKey">
            <summary>
            Key found inside of the Exception.Data to inform if the exception which mechanism tracked it.
            </summary>
        </member>
        <member name="P:Sentry.Protocol.Mechanism.Type">
            <summary>
            Required unique identifier of this mechanism determining rendering and processing of the mechanism data.
            </summary>
            <remarks>
            The type attribute is required to send any exception mechanism attribute,
            even if the SDK cannot determine the specific mechanism.
            In this case, set the type to "generic". See below for an example.
            </remarks>
        </member>
        <member name="P:Sentry.Protocol.Mechanism.Description">
            <summary>
            Optional human readable description of the error mechanism and a possible hint on how to solve this error.
            </summary>
        </member>
        <member name="P:Sentry.Protocol.Mechanism.HelpLink">
            <summary>
            Optional fully qualified URL to an online help resource, possible interpolated with error parameters.
            </summary>
        </member>
        <member name="P:Sentry.Protocol.Mechanism.Handled">
            <summary>
            Optional flag indicating whether the exception has been handled by the user (e.g. via try..catch).
            </summary>
        </member>
        <member name="P:Sentry.Protocol.Mechanism.Meta">
            <summary>
            Optional information from the operating system or runtime on the exception mechanism.
            </summary>
            <remarks>
            The mechanism meta data usually carries error codes reported by the runtime or operating system,
            along with a platform dependent interpretation of these codes.
            SDKs can safely omit code names and descriptions for well known error codes, as it will be filled out by Sentry.
            For proprietary or vendor-specific error codes, adding these values will give additional information to the user.
            </remarks>
            <see href="https://develop.sentry.dev/sdk/event-payloads/exception/#meta-information"/>
        </member>
        <member name="P:Sentry.Protocol.Mechanism.Data">
            <summary>
            Arbitrary extra data that might help the user understand the error thrown by this mechanism.
            </summary>
        </member>
        <member name="M:Sentry.Protocol.Mechanism.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc />
        </member>
        <member name="M:Sentry.Protocol.Mechanism.FromJson(System.Text.Json.JsonElement)">
            <summary>
            Parses from JSON.
            </summary>
        </member>
        <member name="T:Sentry.Protocol.SentryException">
            <summary>
            Sentry Exception interface.
            </summary>
            <see href="https://develop.sentry.dev/sdk/event-payloads/exception"/>
        </member>
        <member name="P:Sentry.Protocol.SentryException.Type">
            <summary>
            Exception Type.
            </summary>
        </member>
        <member name="P:Sentry.Protocol.SentryException.Value">
            <summary>
            The exception value.
            </summary>
        </member>
        <member name="P:Sentry.Protocol.SentryException.Module">
            <summary>
            The optional module, or package which the exception type lives in.
            </summary>
        </member>
        <member name="P:Sentry.Protocol.SentryException.ThreadId">
            <summary>
            An optional value which refers to a thread in the threads interface.
            </summary>
            <seealso href="https://develop.sentry.dev/sdk/event-payloads/threads/"/>
            <seealso cref="T:Sentry.SentryThread"/>
        </member>
        <member name="P:Sentry.Protocol.SentryException.Stacktrace">
            <summary>
            Stack trace.
            </summary>
            <see href="https://develop.sentry.dev/sdk/event-payloads/stacktrace/"/>
        </member>
        <member name="P:Sentry.Protocol.SentryException.Mechanism">
            <summary>
            An optional mechanism that created this exception.
            </summary>
            <see href="https://develop.sentry.dev/sdk/event-payloads/exception/#exception-mechanism"/>
        </member>
        <member name="P:Sentry.Protocol.SentryException.Data">
            <summary>
            Arbitrary extra data that related to this error
            </summary>
            <remarks>
            The protocol does not yet support data at this level.
            For this reason this property is not serialized.
            The data is moved to the event level on Extra until such support is added
            </remarks>
        </member>
        <member name="M:Sentry.Protocol.SentryException.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc />
        </member>
        <member name="M:Sentry.Protocol.SentryException.FromJson(System.Text.Json.JsonElement)">
            <summary>
            Parses from JSON.
            </summary>
        </member>
        <member name="T:Sentry.Protocol.App">
            <summary>
            Describes the application.
            </summary>
            <remarks>
            As opposed to the runtime, this is the actual application that
            was running and carries meta data about the current session.
            </remarks>
            <seealso href="https://develop.sentry.dev/sdk/event-payloads/contexts/"/>
        </member>
        <member name="F:Sentry.Protocol.App.Type">
            <summary>
            Tells Sentry which type of context this is.
            </summary>
        </member>
        <member name="P:Sentry.Protocol.App.Identifier">
            <summary>
            Version-independent application identifier, often a dotted bundle ID.
            </summary>
        </member>
        <member name="P:Sentry.Protocol.App.StartTime">
            <summary>
            Formatted UTC timestamp when the application was started by the user.
            </summary>
        </member>
        <member name="P:Sentry.Protocol.App.Hash">
            <summary>
            Application specific device identifier.
            </summary>
        </member>
        <member name="P:Sentry.Protocol.App.BuildType">
            <summary>
            String identifying the kind of build, e.g. testflight.
            </summary>
        </member>
        <member name="P:Sentry.Protocol.App.Name">
            <summary>
            Human readable application name, as it appears on the platform.
            </summary>
        </member>
        <member name="P:Sentry.Protocol.App.Version">
            <summary>
            Human readable application version, as it appears on the platform.
            </summary>
        </member>
        <member name="P:Sentry.Protocol.App.Build">
            <summary>
            Internal build identifier, as it appears on the platform.
            </summary>
        </member>
        <member name="M:Sentry.Protocol.App.Clone">
            <summary>
            Clones this instance.
            </summary>
        </member>
        <member name="M:Sentry.Protocol.App.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc />
        </member>
        <member name="M:Sentry.Protocol.App.FromJson(System.Text.Json.JsonElement)">
            <summary>
            Parses from JSON.
            </summary>
        </member>
        <member name="T:Sentry.Protocol.Browser">
            <summary>
            Carries information about the browser or user agent for web-related errors.
            This can either be the browser this event occurred in, or the user agent of a
            web request that triggered the event.
            </summary>
            <seealso href="https://develop.sentry.dev/sdk/event-payloads/contexts/"/>
        </member>
        <member name="F:Sentry.Protocol.Browser.Type">
            <summary>
            Tells Sentry which type of context this is.
            </summary>
        </member>
        <member name="P:Sentry.Protocol.Browser.Name">
            <summary>
            Display name of the browser application.
            </summary>
        </member>
        <member name="P:Sentry.Protocol.Browser.Version">
            <summary>
            Version string of the browser.
            </summary>
        </member>
        <member name="M:Sentry.Protocol.Browser.Clone">
            <summary>
            Clones this instance
            </summary>
        </member>
        <member name="M:Sentry.Protocol.Browser.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc />
        </member>
        <member name="M:Sentry.Protocol.Browser.FromJson(System.Text.Json.JsonElement)">
            <summary>
            Parses from JSON.
            </summary>
        </member>
        <member name="T:Sentry.Protocol.Device">
            <summary>
            Describes the device that caused the event. This is most appropriate for mobile applications.
            </summary>
            <seealso href="https://develop.sentry.dev/sdk/event-payloads/contexts/"/>
        </member>
        <member name="F:Sentry.Protocol.Device.Type">
            <summary>
            Tells Sentry which type of context this is.
            </summary>
        </member>
        <member name="P:Sentry.Protocol.Device.Timezone">
            <summary>
            The timezone of the device.
            </summary>
            <example>
            Europe/Vienna
            </example>
        </member>
        <member name="P:Sentry.Protocol.Device.Name">
            <summary>
            The name of the device. This is typically a hostname.
            </summary>
        </member>
        <member name="P:Sentry.Protocol.Device.Manufacturer">
            <summary>
            The manufacturer of the device.
            </summary>
        </member>
        <member name="P:Sentry.Protocol.Device.Brand">
            <summary>
            The brand of the device.
            </summary>
        </member>
        <member name="P:Sentry.Protocol.Device.Family">
            <summary>
            The family of the device.
            </summary>
            <remarks>
            This is normally the common part of model names across generations.
            </remarks>
            <example>
            iPhone, Samsung Galaxy
            </example>
        </member>
        <member name="P:Sentry.Protocol.Device.Model">
            <summary>
            The model name.
            </summary>
            <example>
            Samsung Galaxy S3
            </example>
        </member>
        <member name="P:Sentry.Protocol.Device.ModelId">
            <summary>
            An internal hardware revision to identify the device exactly.
            </summary>
        </member>
        <member name="P:Sentry.Protocol.Device.Architecture">
            <summary>
            The CPU architecture.
            </summary>
        </member>
        <member name="P:Sentry.Protocol.Device.BatteryLevel">
            <summary>
            If the device has a battery an integer defining the battery level (in the range 0-100).
            </summary>
        </member>
        <member name="P:Sentry.Protocol.Device.IsCharging">
            <summary>
            True if the device is charging.
            </summary>
        </member>
        <member name="P:Sentry.Protocol.Device.IsOnline">
            <summary>
            True if the device has a internet connection.
            </summary>
        </member>
        <member name="P:Sentry.Protocol.Device.Orientation">
            <summary>
            This can be a string portrait or landscape to define the orientation of a device.
            </summary>
        </member>
        <member name="P:Sentry.Protocol.Device.Simulator">
            <summary>
            A boolean defining whether this device is a simulator or an actual device.
            </summary>
        </member>
        <member name="P:Sentry.Protocol.Device.MemorySize">
            <summary>
            Total system memory available in bytes.
            </summary>
        </member>
        <member name="P:Sentry.Protocol.Device.FreeMemory">
            <summary>
            Free system memory in bytes.
            </summary>
        </member>
        <member name="P:Sentry.Protocol.Device.UsableMemory">
            <summary>
            Memory usable for the app in bytes.
            </summary>
        </member>
        <member name="P:Sentry.Protocol.Device.LowMemory">
            <summary>
            True, if the device memory is low.
            </summary>
        </member>
        <member name="P:Sentry.Protocol.Device.StorageSize">
            <summary>
            Total device storage in bytes.
            </summary>
        </member>
        <member name="P:Sentry.Protocol.Device.FreeStorage">
            <summary>
            Free device storage in bytes.
            </summary>
        </member>
        <member name="P:Sentry.Protocol.Device.ExternalStorageSize">
            <summary>
            Total size of an attached external storage in bytes (e.g.: android SDK card).
            </summary>
        </member>
        <member name="P:Sentry.Protocol.Device.ExternalFreeStorage">
            <summary>
            Free size of an attached external storage in bytes (e.g.: android SDK card).
            </summary>
        </member>
        <member name="P:Sentry.Protocol.Device.ScreenResolution">
            <summary>
            The resolution of the screen.
            </summary>
            <example>
            800x600
            </example>
        </member>
        <member name="P:Sentry.Protocol.Device.ScreenDensity">
            <summary>
            The logical density of the display.
            </summary>
        </member>
        <member name="P:Sentry.Protocol.Device.ScreenDpi">
            <summary>
            The screen density as dots-per-inch.
            </summary>
        </member>
        <member name="P:Sentry.Protocol.Device.BootTime">
            <summary>
            A formatted UTC timestamp when the system was booted.
            </summary>
            <example>
            2018-02-08T12:52:12Z
            </example>
        </member>
        <member name="P:Sentry.Protocol.Device.ProcessorCount">
            <summary>
            Number of "logical processors".
            </summary>
            <example>
            8
            </example>
        </member>
        <member name="P:Sentry.Protocol.Device.CpuDescription">
            <summary>
            CPU description.
            </summary>
            <example>
            Intel(R) Core(TM)2 Quad CPU Q6600 @ 2.40GHz
            </example>
        </member>
        <member name="P:Sentry.Protocol.Device.ProcessorFrequency">
            <summary>
            Processor frequency in MHz. Note that the actual CPU frequency might vary depending on current load and power
            conditions, especially on low-powered devices like phones and laptops. On some platforms it's not possible
            to query the CPU frequency. Currently such platforms are iOS and WebGL.
            </summary>
            <example>
            2500
            </example>
        </member>
        <member name="P:Sentry.Protocol.Device.DeviceType">
            <summary>
            Kind of device the application is running on.
            </summary>
            <example>
            Unknown, Handheld, Console, Desktop
            </example>
        </member>
        <member name="P:Sentry.Protocol.Device.BatteryStatus">
            <summary>
            Status of the device's battery.
            </summary>
            <example>
            Unknown, Charging, Discharging, NotCharging, Full
            </example>
        </member>
        <member name="P:Sentry.Protocol.Device.DeviceUniqueIdentifier">
            <summary>
            Unique device identifier. Depends on the running platform.
            </summary>
            <example>
            iOS: UIDevice.identifierForVendor (UUID)
            Android: md5 of ANDROID_ID
            Windows Store Apps: AdvertisingManager::AdvertisingId (possible fallback to HardwareIdentification::GetPackageSpecificToken().Id)
            Windows Standalone: hash from the concatenation of strings taken from Computer System Hardware Classes
            </example>
        </member>
        <member name="P:Sentry.Protocol.Device.SupportsVibration">
            <summary>
            Is vibration available on the device?
            </summary>
        </member>
        <member name="P:Sentry.Protocol.Device.SupportsAccelerometer">
            <summary>
            Is accelerometer available on the device?
            </summary>
        </member>
        <member name="P:Sentry.Protocol.Device.SupportsGyroscope">
            <summary>
            Is gyroscope available on the device?
            </summary>
        </member>
        <member name="P:Sentry.Protocol.Device.SupportsAudio">
            <summary>
            Is audio available on the device?
            </summary>
        </member>
        <member name="P:Sentry.Protocol.Device.SupportsLocationService">
            <summary>
            Is the device capable of reporting its location?
            </summary>
        </member>
        <member name="M:Sentry.Protocol.Device.Clone">
            <summary>
            Clones this instance.
            </summary>
        </member>
        <member name="M:Sentry.Protocol.Device.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc />
        </member>
        <member name="M:Sentry.Protocol.Device.FromJson(System.Text.Json.JsonElement)">
            <summary>
            Parses from JSON.
            </summary>
        </member>
        <member name="T:Sentry.Protocol.DeviceOrientation">
            <summary>
            Defines the orientation of a device.
            </summary>
        </member>
        <member name="F:Sentry.Protocol.DeviceOrientation.Portrait">
            <summary>
            Portrait.
            </summary>
        </member>
        <member name="F:Sentry.Protocol.DeviceOrientation.Landscape">
            <summary>
            Landscape.
            </summary>
        </member>
        <member name="T:Sentry.Protocol.Gpu">
            <summary>
            Graphics device unit.
            </summary>
            <seealso href="https://develop.sentry.dev/sdk/event-payloads/contexts/#gpu-context"/>
        </member>
        <member name="F:Sentry.Protocol.Gpu.Type">
            <summary>
            Tells Sentry which type of context this is.
            </summary>
        </member>
        <member name="P:Sentry.Protocol.Gpu.Name">
            <summary>
            The name of the graphics device.
            </summary>
            <example>
            iPod touch: Apple A8 GPU
            Samsung S7: Mali-T880
            </example>
        </member>
        <member name="P:Sentry.Protocol.Gpu.Id">
            <summary>
            The PCI Id of the graphics device.
            </summary>
            <remarks>
            Combined with <see cref="P:Sentry.Protocol.Gpu.VendorId"/> uniquely identifies the GPU.
            </remarks>
        </member>
        <member name="P:Sentry.Protocol.Gpu.VendorId">
            <summary>
            The PCI vendor Id of the graphics device.
            </summary>
            <remarks>
            Combined with <see cref="P:Sentry.Protocol.Gpu.Id"/> uniquely identifies the GPU.
            </remarks>
            <seealso href="https://docs.microsoft.com/en-us/windows-hardware/drivers/install/identifiers-for-pci-devices"/>
            <seealso href="http://pci-ids.ucw.cz/read/PC/"/>
        </member>
        <member name="P:Sentry.Protocol.Gpu.VendorName">
            <summary>
            The vendor name reported by the graphic device.
            </summary>
            <example>
            Apple, ARM, WebKit
            </example>
        </member>
        <member name="P:Sentry.Protocol.Gpu.MemorySize">
            <summary>
            Total GPU memory available in mega-bytes.
            </summary>
        </member>
        <member name="P:Sentry.Protocol.Gpu.ApiType">
            <summary>
            Device type.
            </summary>
            <remarks>The low level API used.</remarks>
            <example>Metal, Direct3D11, OpenGLES3, PlayStation4, XboxOne</example>
        </member>
        <member name="P:Sentry.Protocol.Gpu.MultiThreadedRendering">
            <summary>
            Whether the GPU is multi-threaded rendering or not.
            </summary>
        </member>
        <member name="P:Sentry.Protocol.Gpu.Version">
            <summary>
            The Version of the API of the graphics device.
            </summary>
            <example>
            iPod touch: Metal
            Android: OpenGL ES 3.2 v1.r22p0-01rel0.f294e54ceb2cb2d81039204fa4b0402e
            WebGL Windows: OpenGL ES 3.0 (WebGL 2.0 (OpenGL ES 3.0 Chromium))
            OpenGL 2.0, Direct3D 9.0c
            </example>
        </member>
        <member name="P:Sentry.Protocol.Gpu.NpotSupport">
            <summary>
            The Non-Power-Of-Two support level.
            </summary>
            <example>
            Full
            </example>
        </member>
        <member name="P:Sentry.Protocol.Gpu.MaxTextureSize">
            <summary>
            Largest size of a texture that is supported by the graphics hardware.
            </summary>
        </member>
        <member name="P:Sentry.Protocol.Gpu.GraphicsShaderLevel">
            <summary>
            Approximate "shader capability" level of the graphics device.
            </summary>
            <example>
            Shader Model 2.0, OpenGL ES 3.0, Metal / OpenGL ES 3.1, 27 (unknown)
            </example>
        </member>
        <member name="P:Sentry.Protocol.Gpu.SupportsDrawCallInstancing">
            <summary>
            Is GPU draw call instancing supported?
            </summary>
        </member>
        <member name="P:Sentry.Protocol.Gpu.SupportsRayTracing">
            <summary>
            Is ray tracing available on the device?
            </summary>
        </member>
        <member name="P:Sentry.Protocol.Gpu.SupportsComputeShaders">
            <summary>
            Are compute shaders available on the device?
            </summary>
        </member>
        <member name="P:Sentry.Protocol.Gpu.SupportsGeometryShaders">
            <summary>
            Are geometry shaders available on the device?
            </summary>
        </member>
        <member name="M:Sentry.Protocol.Gpu.Clone">
            <summary>
            Clones this instance.
            </summary>
        </member>
        <member name="M:Sentry.Protocol.Gpu.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc />
        </member>
        <member name="M:Sentry.Protocol.Gpu.FromJson(System.Text.Json.JsonElement)">
            <summary>
            Parses from JSON.
            </summary>
        </member>
        <member name="T:Sentry.Protocol.ITraceContext">
            <summary>
            Trace metadata stored in 'contexts.trace' on a n event or transaction.
            </summary>
        </member>
        <member name="P:Sentry.Protocol.ITraceContext.SpanId">
            <summary>
            Span ID.
            </summary>
        </member>
        <member name="P:Sentry.Protocol.ITraceContext.ParentSpanId">
            <summary>
            Parent ID.
            </summary>
        </member>
        <member name="P:Sentry.Protocol.ITraceContext.TraceId">
            <summary>
            Trace ID.
            </summary>
        </member>
        <member name="P:Sentry.Protocol.ITraceContext.Operation">
            <summary>
            Operation.
            </summary>
        </member>
        <member name="P:Sentry.Protocol.ITraceContext.Description">
            <summary>
            Description.
            </summary>
        </member>
        <member name="P:Sentry.Protocol.ITraceContext.Status">
            <summary>
            Status.
            </summary>
        </member>
        <member name="P:Sentry.Protocol.ITraceContext.IsSampled">
            <summary>
            Whether the span or transaction is sampled in (i.e. eligible for sending to Sentry).
            </summary>
        </member>
        <member name="T:Sentry.Protocol.OperatingSystem">
            <summary>
            Represents Sentry's context for OS.
            </summary>
            <remarks>
            Defines the operating system that caused the event. In web contexts, this is the operating system of the browser (normally pulled from the User-Agent string).
            </remarks>
            <seealso href="https://develop.sentry.dev/sdk/event-payloads/contexts/#os-context"/>
        </member>
        <member name="F:Sentry.Protocol.OperatingSystem.Type">
            <summary>
            Tells Sentry which type of context this is.
            </summary>
        </member>
        <member name="P:Sentry.Protocol.OperatingSystem.Name">
            <summary>
            The name of the operating system.
            </summary>
        </member>
        <member name="P:Sentry.Protocol.OperatingSystem.Version">
            <summary>
            The version of the operating system.
            </summary>
        </member>
        <member name="P:Sentry.Protocol.OperatingSystem.RawDescription">
            <summary>
            An optional raw description that Sentry can use in an attempt to normalize OS info.
            </summary>
            <remarks>
            When the system doesn't expose a clear API for <see cref="P:Sentry.Protocol.OperatingSystem.Name"/> and <see cref="P:Sentry.Protocol.OperatingSystem.Version"/>
            this field can be used to provide a raw system info (e.g: uname)
            </remarks>
        </member>
        <member name="P:Sentry.Protocol.OperatingSystem.Build">
            <summary>
            The internal build revision of the operating system.
            </summary>
        </member>
        <member name="P:Sentry.Protocol.OperatingSystem.KernelVersion">
            <summary>
            If known, this can be an independent kernel version string. Typically
            this is something like the entire output of the 'uname' tool.
            </summary>
        </member>
        <member name="P:Sentry.Protocol.OperatingSystem.Rooted">
            <summary>
            An optional boolean that defines if the OS has been jailbroken or rooted.
            </summary>
        </member>
        <member name="M:Sentry.Protocol.OperatingSystem.Clone">
            <summary>
            Clones this instance
            </summary>
        </member>
        <member name="M:Sentry.Protocol.OperatingSystem.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc />
        </member>
        <member name="M:Sentry.Protocol.OperatingSystem.FromJson(System.Text.Json.JsonElement)">
            <summary>
            Parses from JSON.
            </summary>
        </member>
        <member name="T:Sentry.Protocol.Runtime">
            <summary>
            This describes a runtime in more detail.
            </summary>
            <remarks>
            Typically this context is used multiple times if multiple runtimes are involved (for instance if you have a JavaScript application running on top of JVM)
            </remarks>
            <seealso href="https://develop.sentry.dev/sdk/event-payloads/contexts/"/>
        </member>
        <member name="F:Sentry.Protocol.Runtime.Type">
            <summary>
            Tells Sentry which type of context this is.
            </summary>
        </member>
        <member name="P:Sentry.Protocol.Runtime.Name">
            <summary>
            The name of the runtime.
            </summary>
        </member>
        <member name="P:Sentry.Protocol.Runtime.Version">
            <summary>
            The version identifier of the runtime.
            </summary>
        </member>
        <member name="P:Sentry.Protocol.Runtime.RawDescription">
            <summary>
             An optional raw description that Sentry can use in an attempt to normalize Runtime info.
            </summary>
            <remarks>
            When the system doesn't expose a clear API for <see cref="P:Sentry.Protocol.Runtime.Name"/> and <see cref="P:Sentry.Protocol.Runtime.Version"/>
            this field can be used to provide a raw system info (e.g: .NET Framework 4.7.1).
            </remarks>
        </member>
        <member name="P:Sentry.Protocol.Runtime.Build">
            <summary>
            An optional build number.
            </summary>
            <see href="https://docs.microsoft.com/en-us/dotnet/framework/migration-guide/how-to-determine-which-versions-are-installed"/>
        </member>
        <member name="M:Sentry.Protocol.Runtime.Clone">
            <summary>
            Clones this instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sentry.Protocol.Runtime.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc />
        </member>
        <member name="M:Sentry.Protocol.Runtime.FromJson(System.Text.Json.JsonElement)">
            <summary>
            Parses from JSON.
            </summary>
        </member>
        <member name="T:Sentry.Protocol.Trace">
            <summary>
            Trace context data.
            </summary>
        </member>
        <member name="F:Sentry.Protocol.Trace.Type">
            <summary>
            Tells Sentry which type of context this is.
            </summary>
        </member>
        <member name="P:Sentry.Protocol.Trace.SpanId">
            <inheritdoc />
        </member>
        <member name="P:Sentry.Protocol.Trace.ParentSpanId">
            <inheritdoc />
        </member>
        <member name="P:Sentry.Protocol.Trace.TraceId">
            <inheritdoc />
        </member>
        <member name="P:Sentry.Protocol.Trace.Operation">
            <inheritdoc />
        </member>
        <member name="P:Sentry.Protocol.Trace.Description">
            <inheritdoc />
        </member>
        <member name="P:Sentry.Protocol.Trace.Status">
            <inheritdoc />
        </member>
        <member name="P:Sentry.Protocol.Trace.IsSampled">
            <inheritdoc />
        </member>
        <member name="M:Sentry.Protocol.Trace.Clone">
            <summary>
            Clones this instance.
            </summary>
        </member>
        <member name="M:Sentry.Protocol.Trace.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc />
        </member>
        <member name="M:Sentry.Protocol.Trace.FromJson(System.Text.Json.JsonElement)">
            <summary>
            Parses trace context from JSON.
            </summary>
        </member>
        <member name="T:Sentry.SentryStackFrame">
            <summary>
            A frame of a stacktrace.
            </summary>
            <see href="https://develop.sentry.dev/sdk/event-payloads/stacktrace/"/>
        </member>
        <member name="P:Sentry.SentryStackFrame.FileName">
            <summary>
            The relative file path to the call.
            </summary>
        </member>
        <member name="P:Sentry.SentryStackFrame.Function">
            <summary>
            The name of the function being called.
            </summary>
        </member>
        <member name="P:Sentry.SentryStackFrame.Module">
            <summary>
            Platform-specific module path.
            </summary>
        </member>
        <member name="P:Sentry.SentryStackFrame.LineNumber">
            <summary>
            The line number of the call.
            </summary>
        </member>
        <member name="P:Sentry.SentryStackFrame.ColumnNumber">
            <summary>
            The column number of the call.
            </summary>
        </member>
        <member name="P:Sentry.SentryStackFrame.AbsolutePath">
            <summary>
            The absolute path to filename.
            </summary>
        </member>
        <member name="P:Sentry.SentryStackFrame.ContextLine">
            <summary>
            Source code in filename at line number.
            </summary>
        </member>
        <member name="P:Sentry.SentryStackFrame.PreContext">
            <summary>
            A list of source code lines before context_line (in order) – usually [lineno - 5:lineno].
            </summary>
        </member>
        <member name="P:Sentry.SentryStackFrame.PostContext">
            <summary>
            A list of source code lines after context_line (in order) – usually [lineno + 1:lineno + 5].
            </summary>
        </member>
        <member name="P:Sentry.SentryStackFrame.InApp">
            <summary>
            Signifies whether this frame is related to the execution of the relevant code in this stacktrace.
            </summary>
            <example>
            For example, the frames that might power the framework’s web server of your app are probably not relevant,
            however calls to the framework’s library once you start handling code likely are.
            </example>
        </member>
        <member name="P:Sentry.SentryStackFrame.Vars">
            <summary>
            A mapping of variables which were available within this frame (usually context-locals).
            </summary>
        </member>
        <member name="P:Sentry.SentryStackFrame.FramesOmitted">
            <summary>
            Which frames were omitted, if any.
            </summary>
            <remarks>
            If the list of frames is large, you can explicitly tell the system that you’ve omitted a range of frames.
            The frames_omitted must be a single tuple two values: start and end.
            </remarks>
            <example>
            If you only removed the 8th frame, the value would be (8, 9), meaning it started at the 8th frame,
            and went until the 9th (the number of frames omitted is end-start).
            The values should be based on a one-index.
            </example>
        </member>
        <member name="P:Sentry.SentryStackFrame.Package">
            <summary>
            The assembly where the code resides.
            </summary>
        </member>
        <member name="P:Sentry.SentryStackFrame.Platform">
            <summary>
            This can override the platform for a single frame. Otherwise the platform of the event is assumed.
            </summary>
        </member>
        <member name="P:Sentry.SentryStackFrame.ImageAddress">
            <summary>
            Optionally an address of the debug image to reference.
            If this is set and a known image is defined by debug_meta then symbolication can take place.
            </summary>
        </member>
        <member name="P:Sentry.SentryStackFrame.SymbolAddress">
            <summary>
            An optional address that points to a symbol.
            We actually use the instruction address for symbolication but this can be used to calculate an instruction offset automatically.
            </summary>
        </member>
        <member name="P:Sentry.SentryStackFrame.InstructionAddress">
            <summary>
            An optional instruction address for symbolication.<br/>
            This should be a string with a hexadecimal number that includes a <b>0x</b> prefix.<br/>
            If this is set and a known image is defined in the <see href="https://develop.sentry.dev/sdk/event-payloads/debugmeta/">Debug Meta Interface</see>, then symbolication can take place.<br/>
            </summary>
        </member>
        <member name="P:Sentry.SentryStackFrame.InstructionOffset">
            <summary>
            The instruction offset.
            </summary>
            <remarks>
            The official docs refer to it as 'The difference between instruction address and symbol address in bytes.'
            In .NET this means the IL Offset within the assembly.
            </remarks>
        </member>
        <member name="M:Sentry.SentryStackFrame.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc />
        </member>
        <member name="M:Sentry.SentryStackFrame.FromJson(System.Text.Json.JsonElement)">
            <summary>
            Parses from JSON.
            </summary>
        </member>
        <member name="T:Sentry.SentryStackTrace">
            <summary>
            Sentry Stacktrace interface.
            </summary>
            <remarks>
            A stacktrace contains a list of frames, each with various bits (most optional) describing the context of that frame.
            Frames should be sorted from oldest to newest.
            </remarks>
            <see href="https://develop.sentry.dev/sdk/event-payloads/stacktrace/"/>
        </member>
        <member name="P:Sentry.SentryStackTrace.Frames">
            <summary>
            The list of frames in the stack.
            </summary>
            <remarks>
            The list of frames should be ordered by the oldest call first.
            </remarks>
        </member>
        <member name="M:Sentry.SentryStackTrace.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc />
        </member>
        <member name="M:Sentry.SentryStackTrace.FromJson(System.Text.Json.JsonElement)">
            <summary>
            Parses from JSON.
            </summary>
        </member>
        <member name="T:Sentry.Extensibility.BaseRequestPayloadExtractor">
            <summary>
            Base type for payload extraction.
            </summary>
        </member>
        <member name="M:Sentry.Extensibility.BaseRequestPayloadExtractor.ExtractPayload(Sentry.Extensibility.IHttpRequest)">
            <summary>
            Extract the payload of the <see cref="T:Sentry.Extensibility.IHttpRequest"/>.
            </summary>
        </member>
        <member name="M:Sentry.Extensibility.BaseRequestPayloadExtractor.IsSupported(Sentry.Extensibility.IHttpRequest)">
            <summary>
            Whether this implementation supports the <see cref="T:Sentry.Extensibility.IHttpRequest"/>.
            </summary>
        </member>
        <member name="M:Sentry.Extensibility.BaseRequestPayloadExtractor.DoExtractPayLoad(Sentry.Extensibility.IHttpRequest)">
            <summary>
            The extraction that gets called in case <see cref="M:Sentry.Extensibility.BaseRequestPayloadExtractor.IsSupported(Sentry.Extensibility.IHttpRequest)"/> is true.
            </summary>
        </member>
        <member name="T:Sentry.Extensibility.DefaultRequestPayloadExtractor">
            <summary>
            Default request payload extractor that will read the body as a string.
            </summary>
        </member>
        <member name="M:Sentry.Extensibility.DefaultRequestPayloadExtractor.IsSupported(Sentry.Extensibility.IHttpRequest)">
            <summary>
            Whether the <see cref="T:Sentry.Extensibility.IHttpRequest"/> is supported.
            </summary>
        </member>
        <member name="M:Sentry.Extensibility.DefaultRequestPayloadExtractor.DoExtractPayLoad(Sentry.Extensibility.IHttpRequest)">
            <summary>
            Extracts the request body of the <see cref="T:Sentry.Extensibility.IHttpRequest"/> as a string.
            </summary>
        </member>
        <member name="T:Sentry.Extensibility.DiagnosticLoggerExtensions">
            <summary>
            The generic overloads avoid boxing in case logging is disabled for that level
            </summary>
            <remarks>
            Calls to this class verify the level before calling the overload with object params.
            </remarks>
        </member>
        <member name="M:Sentry.Extensibility.DiagnosticLoggerExtensions.LogDebug``1(Sentry.Extensibility.IDiagnosticLogger,System.String,``0)">
            <summary>
            Log a debug message.
            </summary>
        </member>
        <member name="M:Sentry.Extensibility.DiagnosticLoggerExtensions.LogDebug``2(Sentry.Extensibility.IDiagnosticLogger,System.String,``0,``1)">
            <summary>
            Log a debug message.
            </summary>
        </member>
        <member name="M:Sentry.Extensibility.DiagnosticLoggerExtensions.LogDebug(Sentry.Extensibility.IDiagnosticLogger,System.String)">
            <summary>
            Log a debug message.
            </summary>
        </member>
        <member name="M:Sentry.Extensibility.DiagnosticLoggerExtensions.LogInfo(Sentry.Extensibility.IDiagnosticLogger,System.String)">
            <summary>
            Log a info message.
            </summary>
        </member>
        <member name="M:Sentry.Extensibility.DiagnosticLoggerExtensions.LogInfo``1(Sentry.Extensibility.IDiagnosticLogger,System.String,``0)">
            <summary>
            Log a info message.
            </summary>
        </member>
        <member name="M:Sentry.Extensibility.DiagnosticLoggerExtensions.LogInfo``2(Sentry.Extensibility.IDiagnosticLogger,System.String,``0,``1)">
            <summary>
            Log a info message.
            </summary>
        </member>
        <member name="M:Sentry.Extensibility.DiagnosticLoggerExtensions.LogInfo``3(Sentry.Extensibility.IDiagnosticLogger,System.String,``0,``1,``2)">
            <summary>
            Log a info message.
            </summary>
        </member>
        <member name="M:Sentry.Extensibility.DiagnosticLoggerExtensions.LogWarning(Sentry.Extensibility.IDiagnosticLogger,System.String)">
            <summary>
            Log a warning message.
            </summary>
        </member>
        <member name="M:Sentry.Extensibility.DiagnosticLoggerExtensions.LogWarning``1(Sentry.Extensibility.IDiagnosticLogger,System.String,``0)">
            <summary>
            Log a warning message.
            </summary>
        </member>
        <member name="M:Sentry.Extensibility.DiagnosticLoggerExtensions.LogWarning``2(Sentry.Extensibility.IDiagnosticLogger,System.String,``0,``1)">
            <summary>
            Log a warning message.
            </summary>
        </member>
        <member name="M:Sentry.Extensibility.DiagnosticLoggerExtensions.LogError(Sentry.Extensibility.IDiagnosticLogger,System.String,System.Exception)">
            <summary>
            Log a error message.
            </summary>
        </member>
        <member name="M:Sentry.Extensibility.DiagnosticLoggerExtensions.LogError``1(Sentry.Extensibility.IDiagnosticLogger,System.String,System.Exception,``0)">
            <summary>
            Log a error message.
            </summary>
        </member>
        <member name="M:Sentry.Extensibility.DiagnosticLoggerExtensions.LogError``2(Sentry.Extensibility.IDiagnosticLogger,System.String,System.Exception,``0,``1)">
            <summary>
            Log a error message.
            </summary>
        </member>
        <member name="M:Sentry.Extensibility.DiagnosticLoggerExtensions.LogError``4(Sentry.Extensibility.IDiagnosticLogger,System.String,System.Exception,``0,``1,``2,``3)">
            <summary>
            Log a error message.
            </summary>
        </member>
        <member name="M:Sentry.Extensibility.DiagnosticLoggerExtensions.LogError``3(Sentry.Extensibility.IDiagnosticLogger,System.Exception,System.String,``0,``1,``2)">
            <summary>
            Log an error message.
            </summary>
        </member>
        <member name="M:Sentry.Extensibility.DiagnosticLoggerExtensions.LogFatal(Sentry.Extensibility.IDiagnosticLogger,System.String,System.Exception)">
            <summary>
            Log a warning message.
            </summary>
        </member>
        <member name="T:Sentry.Extensibility.DisabledHub">
            <summary>
            Disabled Hub.
            </summary>
        </member>
        <member name="F:Sentry.Extensibility.DisabledHub.Instance">
            <summary>
            The singleton instance.
            </summary>
        </member>
        <member name="P:Sentry.Extensibility.DisabledHub.IsEnabled">
            <summary>
            Always disabled.
            </summary>
        </member>
        <member name="M:Sentry.Extensibility.DisabledHub.ConfigureScope(System.Action{Sentry.Scope})">
            <summary>
            No-Op.
            </summary>
        </member>
        <member name="M:Sentry.Extensibility.DisabledHub.ConfigureScopeAsync(System.Func{Sentry.Scope,System.Threading.Tasks.Task})">
            <summary>
            No-Op.
            </summary>
        </member>
        <member name="M:Sentry.Extensibility.DisabledHub.PushScope">
            <summary>
            No-Op.
            </summary>
        </member>
        <member name="M:Sentry.Extensibility.DisabledHub.PushScope``1(``0)">
            <summary>
            No-Op.
            </summary>
        </member>
        <member name="M:Sentry.Extensibility.DisabledHub.WithScope(System.Action{Sentry.Scope})">
            <summary>
            No-Op.
            </summary>
        </member>
        <member name="M:Sentry.Extensibility.DisabledHub.StartTransaction(Sentry.ITransactionContext,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Returns a dummy transaction.
            </summary>
        </member>
        <member name="M:Sentry.Extensibility.DisabledHub.BindException(System.Exception,Sentry.ISpan)">
            <summary>
            No-Op.
            </summary>
        </member>
        <member name="M:Sentry.Extensibility.DisabledHub.GetSpan">
            <summary>
            Returns null.
            </summary>
        </member>
        <member name="M:Sentry.Extensibility.DisabledHub.GetTraceHeader">
            <summary>
            Returns null.
            </summary>
        </member>
        <member name="M:Sentry.Extensibility.DisabledHub.StartSession">
            <summary>
            No-Op.
            </summary>
        </member>
        <member name="M:Sentry.Extensibility.DisabledHub.PauseSession">
            <summary>
            No-Op.
            </summary>
        </member>
        <member name="M:Sentry.Extensibility.DisabledHub.ResumeSession">
            <summary>
            No-Op.
            </summary>
        </member>
        <member name="M:Sentry.Extensibility.DisabledHub.EndSession(Sentry.SessionEndStatus)">
            <summary>
            No-Op.
            </summary>
        </member>
        <member name="M:Sentry.Extensibility.DisabledHub.BindClient(Sentry.ISentryClient)">
            <summary>
            No-Op.
            </summary>
        </member>
        <member name="M:Sentry.Extensibility.DisabledHub.CaptureEvent(Sentry.SentryEvent,Sentry.Scope)">
            <summary>
            No-Op.
            </summary>
        </member>
        <member name="M:Sentry.Extensibility.DisabledHub.CaptureTransaction(Sentry.Transaction)">
            <summary>
            No-Op.
            </summary>
        </member>
        <member name="M:Sentry.Extensibility.DisabledHub.CaptureSession(Sentry.SessionUpdate)">
            <summary>
            No-Op.
            </summary>
        </member>
        <member name="M:Sentry.Extensibility.DisabledHub.FlushAsync(System.TimeSpan)">
            <summary>
            No-Op.
            </summary>
        </member>
        <member name="M:Sentry.Extensibility.DisabledHub.Dispose">
            <summary>
            No-Op.
            </summary>
        </member>
        <member name="M:Sentry.Extensibility.DisabledHub.CaptureUserFeedback(Sentry.UserFeedback)">
            <summary>
            No-Op.
            </summary>
        </member>
        <member name="P:Sentry.Extensibility.DisabledHub.LastEventId">
            <summary>
            No-Op.
            </summary>
        </member>
        <member name="T:Sentry.Extensibility.FormRequestPayloadExtractor">
            <summary>
            Form based request extractor.
            </summary>
        </member>
        <member name="M:Sentry.Extensibility.FormRequestPayloadExtractor.IsSupported(Sentry.Extensibility.IHttpRequest)">
            <summary>
            Supports <see cref="T:Sentry.Extensibility.IHttpRequest"/> with content type application/x-www-form-urlencoded.
            </summary>
        </member>
        <member name="M:Sentry.Extensibility.FormRequestPayloadExtractor.DoExtractPayLoad(Sentry.Extensibility.IHttpRequest)">
            <summary>
            Extracts the request form data as a dictionary.
            </summary>
        </member>
        <member name="T:Sentry.Extensibility.HubAdapter">
            <summary>
            An implementation of <see cref="T:Sentry.IHub" /> which forwards any call to <see cref="T:Sentry.SentrySdk" />.
            </summary>
            <remarks>
            Allows testing classes which otherwise would need to depend on static <see cref="T:Sentry.SentrySdk" />
            by having them depend on <see cref="T:Sentry.IHub"/> instead, which can be mocked.
            </remarks>
            <inheritdoc cref="T:Sentry.IHub" />
        </member>
        <member name="F:Sentry.Extensibility.HubAdapter.Instance">
            <summary>
            The single instance which forwards all calls to <see cref="T:Sentry.SentrySdk"/>
            </summary>
        </member>
        <member name="P:Sentry.Extensibility.HubAdapter.IsEnabled">
            <summary>
            Forwards the call to <see cref="T:Sentry.SentrySdk"/>.
            </summary>
        </member>
        <member name="P:Sentry.Extensibility.HubAdapter.LastEventId">
            <summary>
            Forwards the call to <see cref="T:Sentry.SentrySdk"/>.
            </summary>
        </member>
        <member name="M:Sentry.Extensibility.HubAdapter.ConfigureScope(System.Action{Sentry.Scope})">
            <summary>
            Forwards the call to <see cref="T:Sentry.SentrySdk"/>.
            </summary>
        </member>
        <member name="M:Sentry.Extensibility.HubAdapter.ConfigureScopeAsync(System.Func{Sentry.Scope,System.Threading.Tasks.Task})">
            <summary>
            Forwards the call to <see cref="T:Sentry.SentrySdk"/>.
            </summary>
        </member>
        <member name="M:Sentry.Extensibility.HubAdapter.PushScope">
            <summary>
            Forwards the call to <see cref="T:Sentry.SentrySdk"/>.
            </summary>
        </member>
        <member name="M:Sentry.Extensibility.HubAdapter.PushScope``1(``0)">
            <summary>
            Forwards the call to <see cref="T:Sentry.SentrySdk"/>.
            </summary>
        </member>
        <member name="M:Sentry.Extensibility.HubAdapter.WithScope(System.Action{Sentry.Scope})">
            <summary>
            Forwards the call to <see cref="T:Sentry.SentrySdk"/>.
            </summary>
        </member>
        <member name="M:Sentry.Extensibility.HubAdapter.StartTransaction(Sentry.ITransactionContext,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Forwards the call to <see cref="T:Sentry.SentrySdk"/>.
            </summary>
        </member>
        <member name="M:Sentry.Extensibility.HubAdapter.BindException(System.Exception,Sentry.ISpan)">
            <summary>
            Forwards the call to <see cref="T:Sentry.SentrySdk"/>.
            </summary>
        </member>
        <member name="M:Sentry.Extensibility.HubAdapter.GetSpan">
            <summary>
            Forwards the call to <see cref="T:Sentry.SentrySdk"/>.
            </summary>
        </member>
        <member name="M:Sentry.Extensibility.HubAdapter.GetTraceHeader">
            <summary>
            Forwards the call to <see cref="T:Sentry.SentrySdk"/>.
            </summary>
        </member>
        <member name="M:Sentry.Extensibility.HubAdapter.StartSession">
            <summary>
            Forwards the call to <see cref="T:Sentry.SentrySdk"/>.
            </summary>
        </member>
        <member name="M:Sentry.Extensibility.HubAdapter.PauseSession">
            <summary>
            Forwards the call to <see cref="T:Sentry.SentrySdk"/>.
            </summary>
        </member>
        <member name="M:Sentry.Extensibility.HubAdapter.ResumeSession">
            <summary>
            Forwards the call to <see cref="T:Sentry.SentrySdk"/>.
            </summary>
        </member>
        <member name="M:Sentry.Extensibility.HubAdapter.EndSession(Sentry.SessionEndStatus)">
            <summary>
            Forwards the call to <see cref="T:Sentry.SentrySdk"/>.
            </summary>
        </member>
        <member name="M:Sentry.Extensibility.HubAdapter.BindClient(Sentry.ISentryClient)">
            <summary>
            Forwards the call to <see cref="T:Sentry.SentrySdk"/>.
            </summary>
        </member>
        <member name="M:Sentry.Extensibility.HubAdapter.AddBreadcrumb(System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String},Sentry.BreadcrumbLevel)">
            <summary>
            Forwards the call to <see cref="T:Sentry.SentrySdk"/>.
            </summary>
        </member>
        <member name="M:Sentry.Extensibility.HubAdapter.AddBreadcrumb(Sentry.Infrastructure.ISystemClock,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String},Sentry.BreadcrumbLevel)">
            <summary>
            Forwards the call to <see cref="T:Sentry.SentrySdk"/>.
            </summary>
        </member>
        <member name="M:Sentry.Extensibility.HubAdapter.CaptureEvent(Sentry.SentryEvent)">
            <summary>
            Forwards the call to <see cref="T:Sentry.SentrySdk"/>.
            </summary>
        </member>
        <member name="M:Sentry.Extensibility.HubAdapter.CaptureException(System.Exception)">
            <summary>
            Forwards the call to <see cref="T:Sentry.SentrySdk"/>.
            </summary>
        </member>
        <member name="M:Sentry.Extensibility.HubAdapter.CaptureEvent(Sentry.SentryEvent,Sentry.Scope)">
            <summary>
            Forwards the call to <see cref="T:Sentry.SentrySdk"/>.
            </summary>
        </member>
        <member name="M:Sentry.Extensibility.HubAdapter.CaptureTransaction(Sentry.Transaction)">
            <summary>
            Forwards the call to <see cref="T:Sentry.SentrySdk"/>.
            </summary>
        </member>
        <member name="M:Sentry.Extensibility.HubAdapter.CaptureSession(Sentry.SessionUpdate)">
            <summary>
            Forwards the call to <see cref="T:Sentry.SentrySdk"/>.
            </summary>
        </member>
        <member name="M:Sentry.Extensibility.HubAdapter.FlushAsync(System.TimeSpan)">
            <summary>
            Forwards the call to <see cref="T:Sentry.SentrySdk"/>
            </summary>
        </member>
        <member name="M:Sentry.Extensibility.HubAdapter.CaptureUserFeedback(Sentry.UserFeedback)">
            <summary>
            Forwards the call to <see cref="T:Sentry.SentrySdk"/>
            </summary>
        </member>
        <member name="T:Sentry.Extensibility.IBackgroundWorker">
            <summary>
            A worker that queues envelopes synchronously and flushes async.
            </summary>
        </member>
        <member name="M:Sentry.Extensibility.IBackgroundWorker.EnqueueEnvelope(Sentry.Protocol.Envelopes.Envelope)">
            <summary>
            Attempts to queue the envelope with the worker.
            </summary>
            <returns>True of queueing was successful. Otherwise, false.</returns>
        </member>
        <member name="M:Sentry.Extensibility.IBackgroundWorker.FlushAsync(System.TimeSpan)">
            <summary>
            Flushes envelopes asynchronously.
            </summary>
            <param name="timeout">How long to wait for flush to finish.</param>
            <returns>A task to await for the flush operation.</returns>
        </member>
        <member name="P:Sentry.Extensibility.IBackgroundWorker.QueuedItems">
            <summary>
            Current count of items queued up.
            </summary>
        </member>
        <member name="T:Sentry.Extensibility.IDiagnosticLogger">
            <summary>
            Abstraction for internal logging.
            </summary>
        </member>
        <member name="M:Sentry.Extensibility.IDiagnosticLogger.IsEnabled(Sentry.SentryLevel)">
            <summary>
            Whether the logger is enabled or not to the specified <see cref="T:Sentry.SentryLevel"/>.
            </summary>
        </member>
        <member name="M:Sentry.Extensibility.IDiagnosticLogger.Log(Sentry.SentryLevel,System.String,System.Exception,System.Object[])">
            <summary>
            Log an internal SDK message.
            </summary>
            <param name="logLevel">The level.</param>
            <param name="message">The message.</param>
            <param name="exception">An optional Exception.</param>
            <param name="args">Optional arguments for string template.</param>
        </member>
        <member name="T:Sentry.Extensibility.IExceptionFilter">
            <summary>
            A filter to be applied to an exception instance.
            </summary>
        </member>
        <member name="M:Sentry.Extensibility.IExceptionFilter.Filter(System.Exception)">
            <summary>
            Whether to filter out or not the exception.
            </summary>
            <param name="ex">The exception about to be captured.</param>
            <returns><c>true</c> if [the event should be filtered out]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Sentry.Extensibility.IHttpRequest">
            <summary>
            An abstraction to an HTTP Request.
            </summary>
        </member>
        <member name="P:Sentry.Extensibility.IHttpRequest.ContentLength">
            <summary>
            The content length.
            </summary>
        </member>
        <member name="P:Sentry.Extensibility.IHttpRequest.ContentType">
            <summary>
            The content type.
            </summary>
        </member>
        <member name="P:Sentry.Extensibility.IHttpRequest.Body">
            <summary>
            The request body.
            </summary>
        </member>
        <member name="P:Sentry.Extensibility.IHttpRequest.Form">
            <summary>
            Represents the parsed form values sent with the HttpRequest.
            </summary>
        </member>
        <member name="T:Sentry.Extensibility.IRequestPayloadExtractor">
            <summary>
            A request body extractor.
            </summary>
        </member>
        <member name="M:Sentry.Extensibility.IRequestPayloadExtractor.ExtractPayload(Sentry.Extensibility.IHttpRequest)">
            <summary>
            Extracts the payload of the provided <see cref="T:Sentry.Extensibility.IHttpRequest"/>.
            </summary>
            <param name="request">The HTTP Request object.</param>
            <returns>The extracted payload.</returns>
        </member>
        <member name="T:Sentry.Extensibility.ISentryEventExceptionProcessor">
            <summary>
            Process exceptions and augments the event with its data.
            </summary>
        </member>
        <member name="M:Sentry.Extensibility.ISentryEventExceptionProcessor.Process(System.Exception,Sentry.SentryEvent)">
            <summary>
            Process the exception and augments the event with its data.
            </summary>
            <param name="exception">The exception to process.</param>
            <param name="sentryEvent">The event to add data to.</param>
        </member>
        <member name="T:Sentry.Extensibility.ISentryEventProcessor">
            <summary>
            Process a SentryEvent during the prepare phase.
            </summary>
        </member>
        <member name="M:Sentry.Extensibility.ISentryEventProcessor.Process(Sentry.SentryEvent)">
            <summary>
            Process the <see cref="T:Sentry.SentryEvent"/>
            </summary>
            <param name="event">The event to process</param>
            <return>The processed event or <c>null</c> if the event was dropped.</return>
            <remarks>
            The event returned can be the same instance received or a new one.
            Returning null will stop the processing pipeline.
            Meaning the event should no longer be processed nor send.
            </remarks>
        </member>
        <member name="T:Sentry.Extensibility.ISentryStackTraceFactory">
            <summary>
            Factory to <see cref="T:Sentry.SentryStackTrace" /> from an <see cref="T:System.Exception" />.
            </summary>
        </member>
        <member name="M:Sentry.Extensibility.ISentryStackTraceFactory.Create(System.Exception)">
            <summary>
            Creates a <see cref="T:Sentry.SentryStackTrace" /> from the optional <see cref="T:System.Exception" />.
            </summary>
            <param name="exception">The exception to create the stacktrace from.</param>
            <returns>A Sentry stack trace.</returns>
        </member>
        <member name="T:Sentry.Extensibility.ITransport">
            <summary>
            An abstraction to the transport of the event.
            </summary>
        </member>
        <member name="M:Sentry.Extensibility.ITransport.SendEnvelopeAsync(Sentry.Protocol.Envelopes.Envelope,System.Threading.CancellationToken)">
            <summary>
            Sends the <see cref="T:Sentry.Protocol.Envelopes.Envelope" /> to Sentry asynchronously.
            </summary>
            <param name="envelope">The envelope to send to Sentry.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="T:Sentry.Extensibility.RequestBodyExtractionDispatcher">
            <summary>
            Dispatches request body extractions if enabled and within limits.
            </summary>
        </member>
        <member name="M:Sentry.Extensibility.RequestBodyExtractionDispatcher.#ctor(System.Collections.Generic.IEnumerable{Sentry.Extensibility.IRequestPayloadExtractor},Sentry.SentryOptions,System.Func{Sentry.Extensibility.RequestSize})">
            <summary>
            Creates a new instance of <see cref="T:Sentry.Extensibility.RequestBodyExtractionDispatcher"/>.
            </summary>
            <param name="extractors">Extractors to use.</param>
            <param name="options">Sentry Options.</param>
            <param name="sizeSwitch">The max request size to capture.</param>
        </member>
        <member name="M:Sentry.Extensibility.RequestBodyExtractionDispatcher.ExtractPayload(Sentry.Extensibility.IHttpRequest)">
            <summary>
            Extract the payload using the provided extractors.
            </summary>
            <param name="request">The request.</param>
            <returns>A serializable representation of the payload.</returns>
        </member>
        <member name="T:Sentry.Extensibility.RequestSize">
            <summary>
            The size allowed when extracting a request body in a web application.
            </summary>
        </member>
        <member name="F:Sentry.Extensibility.RequestSize.None">
            <summary>
            No request payload is extracted
            </summary>
            <remarks>This is the default value. Opt-in is required.</remarks>
        </member>
        <member name="F:Sentry.Extensibility.RequestSize.Small">
            <summary>
            A small payload is extracted.
            </summary>
        </member>
        <member name="F:Sentry.Extensibility.RequestSize.Medium">
            <summary>
            A medium payload is extracted.
            </summary>
        </member>
        <member name="F:Sentry.Extensibility.RequestSize.Always">
            <summary>
            The SDK will always capture the request body. Sentry might truncate or reject the event if too large.
            </summary>
        </member>
        <member name="T:Sentry.Extensibility.SentryEventExceptionProcessor`1">
            <summary>
            Process an exception type and augments the event with its data.
            </summary>
            <typeparam name="TException">The type of the exception to process.</typeparam>
            <inheritdoc />
        </member>
        <member name="M:Sentry.Extensibility.SentryEventExceptionProcessor`1.Process(System.Exception,Sentry.SentryEvent)">
            <inheritdoc />
        </member>
        <member name="M:Sentry.Extensibility.SentryEventExceptionProcessor`1.ProcessException(`0,Sentry.SentryEvent)">
            <summary>
            Process the exception and event.
            </summary>
            <param name="exception">The exception to process.</param>
            <param name="sentryEvent">The event to process.</param>
        </member>
        <member name="T:Sentry.Extensibility.SentryStackTraceFactory">
            <summary>
            Default factory to <see cref="T:Sentry.SentryStackTrace" /> from an <see cref="T:System.Exception" />.
            </summary>
        </member>
        <member name="M:Sentry.Extensibility.SentryStackTraceFactory.#ctor(Sentry.SentryOptions)">
            <summary>
            Creates an instance of <see cref="T:Sentry.Extensibility.SentryStackTraceFactory"/>.
            </summary>
        </member>
        <member name="M:Sentry.Extensibility.SentryStackTraceFactory.Create(System.Exception)">
            <summary>
            Creates a <see cref="T:Sentry.SentryStackTrace" /> from the optional <see cref="T:System.Exception" />.
            </summary>
            <param name="exception">The exception to create the stacktrace from.</param>
            <returns>A Sentry stack trace.</returns>
        </member>
        <member name="M:Sentry.Extensibility.SentryStackTraceFactory.CreateStackTrace(System.Exception)">
            <summary>
            Creates a s<see cref="T:System.Diagnostics.StackTrace"/> from the <see cref="T:System.Exception"/>.
            </summary>
            <param name="exception">The exception.</param>
            <returns>A StackTrace.</returns>
        </member>
        <member name="M:Sentry.Extensibility.SentryStackTraceFactory.Create(System.Diagnostics.StackTrace,System.Boolean)">
            <summary>
            Creates a <see cref="T:Sentry.SentryStackTrace"/> from the <see cref="T:System.Diagnostics.StackTrace"/>.
            </summary>
            <param name="stackTrace">The stack trace.</param>
            <param name="isCurrentStackTrace">Whether this is the current stack trace.</param>
            <returns>SentryStackTrace</returns>
        </member>
        <member name="M:Sentry.Extensibility.SentryStackTraceFactory.CreateFrames(System.Diagnostics.StackTrace,System.Boolean)">
            <summary>
            Creates an enumerator of <see cref="T:Sentry.SentryStackFrame"/> from a <see cref="T:System.Diagnostics.StackTrace"/>.
            </summary>
        </member>
        <member name="M:Sentry.Extensibility.SentryStackTraceFactory.CreateFrame(System.Diagnostics.StackFrame,System.Boolean)">
            <summary>
            Create a <see cref="T:Sentry.SentryStackFrame"/> from a <see cref="T:System.Diagnostics.StackFrame"/>.
            </summary>
        </member>
        <member name="M:Sentry.Extensibility.SentryStackTraceFactory.InternalCreateFrame(System.Diagnostics.StackFrame,System.Boolean)">
            <summary>
            Default the implementation of CreateFrame.
            </summary>
        </member>
        <member name="M:Sentry.Extensibility.SentryStackTraceFactory.GetMethod(System.Diagnostics.StackFrame)">
            <summary>
            Get a <see cref="T:System.Reflection.MethodBase"/> from <see cref="T:System.Diagnostics.StackFrame"/>.
            </summary>
            <param name="stackFrame">The <see cref="T:System.Diagnostics.StackFrame"/></param>.
        </member>
        <member name="M:Sentry.Extensibility.SentryStackTraceFactory.DemangleAsyncFunctionName(Sentry.SentryStackFrame)">
            <summary>
            Clean up function and module names produced from `async` state machine calls.
            </summary>
            <para>
            When the Microsoft cs.exe compiler compiles some modern C# features,
            such as async/await calls, it can create synthetic function names that
            do not match the function names in the original source code. Here we
            reverse some of these transformations, so that the function and module
            names that appears in the Sentry UI will match the function and module
            names in the original source-code.
            </para>
        </member>
        <member name="M:Sentry.Extensibility.SentryStackTraceFactory.DemangleAnonymousFunction(Sentry.SentryStackFrame)">
            <summary>
            Clean up function names for anonymous lambda calls.
            </summary>
        </member>
        <member name="T:Sentry.FileAttachmentContent">
            <summary>
            Attachment sourced from the file system.
            </summary>
        </member>
        <member name="M:Sentry.FileAttachmentContent.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:Sentry.FileAttachmentContent"/>.
            </summary>
        </member>
        <member name="M:Sentry.FileAttachmentContent.GetStream">
            <inheritdoc />
        </member>
        <member name="T:Sentry.Http.ISentryHttpClientFactory">
            <summary>
            Sentry <see cref="T:System.Net.Http.HttpClient"/> factory.
            </summary>
        </member>
        <member name="M:Sentry.Http.ISentryHttpClientFactory.Create(Sentry.SentryOptions)">
            <summary>
            Creates an HttpClient using the specified options.
            </summary>
            <param name="options">The options.</param>
            <returns><see cref="T:System.Net.Http.HttpClient"/>.</returns>
        </member>
        <member name="T:Sentry.HubExtensions">
            <summary>
            Extension methods for <see cref="T:Sentry.IHub"/>.
            </summary>
        </member>
        <member name="M:Sentry.HubExtensions.StartTransaction(Sentry.IHub,Sentry.ITransactionContext)">
            <summary>
            Starts a transaction.
            </summary>
        </member>
        <member name="M:Sentry.HubExtensions.StartTransaction(Sentry.IHub,System.String,System.String)">
            <summary>
            Starts a transaction.
            </summary>
        </member>
        <member name="M:Sentry.HubExtensions.StartTransaction(Sentry.IHub,System.String,System.String,System.String)">
            <summary>
            Starts a transaction.
            </summary>
        </member>
        <member name="M:Sentry.HubExtensions.StartTransaction(Sentry.IHub,System.String,System.String,Sentry.SentryTraceHeader)">
            <summary>
            Starts a transaction from the specified trace header.
            </summary>
        </member>
        <member name="M:Sentry.HubExtensions.AddBreadcrumb(Sentry.IHub,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String},Sentry.BreadcrumbLevel)">
            <summary>
            Adds a breadcrumb to the current scope.
            </summary>
            <param name="hub">The Hub which holds the scope stack.</param>
            <param name="message">The message.</param>
            <param name="category">Category.</param>
            <param name="type">Breadcrumb type.</param>
            <param name="data">Additional data.</param>
            <param name="level">Breadcrumb level.</param>
        </member>
        <member name="M:Sentry.HubExtensions.AddBreadcrumb(Sentry.IHub,Sentry.Infrastructure.ISystemClock,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String},Sentry.BreadcrumbLevel)">
            <summary>
            Adds a breadcrumb using a custom <see cref="T:Sentry.Infrastructure.ISystemClock"/> which allows better testability.
            </summary>
            <param name="hub">The Hub which holds the scope stack.</param>
            <param name="clock">The system clock.</param>
            <param name="message">The message.</param>
            <param name="category">Category.</param>
            <param name="type">Breadcrumb type.</param>
            <param name="data">Additional data.</param>
            <param name="level">Breadcrumb level.</param>
            <remarks>
            This method is to be used by integrations to allow testing.
            </remarks>
        </member>
        <member name="M:Sentry.HubExtensions.PushAndLockScope(Sentry.IHub)">
            <summary>
            Pushes a new scope while locking it which stop new scope creation.
            </summary>
        </member>
        <member name="M:Sentry.HubExtensions.LockScope(Sentry.IHub)">
            <summary>
            Lock the scope so subsequent <see cref="M:Sentry.ISentryScopeManager.PushScope"/> don't create new scopes.
            </summary>
            <remarks>
            This is useful to stop following scope creation by other integrations
            like Loggers which guarantee log messages are not lost.
            </remarks>
        </member>
        <member name="M:Sentry.HubExtensions.UnlockScope(Sentry.IHub)">
            <summary>
            Unlocks the current scope to allow subsequent calls to <see cref="M:Sentry.ISentryScopeManager.PushScope"/> create new scopes.
            </summary>
        </member>
        <member name="T:Sentry.IAttachmentContent">
            <summary>
            Attachment content.
            </summary>
        </member>
        <member name="M:Sentry.IAttachmentContent.GetStream">
            <summary>
            Gets the stream that represents attachment content.
            </summary>
        </member>
        <member name="T:Sentry.IEventLike">
            <summary>
            Models members common between types that represent event-like data.
            </summary>
        </member>
        <member name="P:Sentry.IEventLike.Level">
            <summary>
            Sentry level.
            </summary>
        </member>
        <member name="P:Sentry.IEventLike.Request">
            <summary>
            Gets or sets the HTTP.
            </summary>
            <value>
            The HTTP.
            </value>
        </member>
        <member name="P:Sentry.IEventLike.Contexts">
            <summary>
            Gets the structured Sentry context.
            </summary>
            <value>
            The contexts.
            </value>
        </member>
        <member name="P:Sentry.IEventLike.User">
            <summary>
            Gets the user information.
            </summary>
            <value>
            The user.
            </value>
        </member>
        <member name="P:Sentry.IEventLike.Platform">
            <summary>
            The name of the platform.
            </summary>
        </member>
        <member name="P:Sentry.IEventLike.Release">
            <summary>
            The release version of the application.
            </summary>
        </member>
        <member name="P:Sentry.IEventLike.Environment">
            <summary>
            The environment name, such as 'production' or 'staging'.
            </summary>
            <remarks>Requires Sentry 8.0 or higher.</remarks>
        </member>
        <member name="P:Sentry.IEventLike.TransactionName">
            <summary>
            The name of the transaction in which there was an event.
            </summary>
            <remarks>
            A transaction should only be defined when it can be well defined.
            On a Web framework, for example, a transaction is the route template
            rather than the actual request path. That is so GET /user/10 and /user/20
            (which have route template /user/{id}) are identified as the same transaction.
            </remarks>
        </member>
        <member name="P:Sentry.IEventLike.Sdk">
            <summary>
            SDK information.
            </summary>
            <remarks>New in Sentry version: 8.4</remarks>
        </member>
        <member name="P:Sentry.IEventLike.Fingerprint">
            <summary>
            A list of strings used to dictate the deduplication of this event.
            </summary>
            <seealso href="https://docs.sentry.io/platforms/dotnet/data-management/event-grouping/grouping-enhancements/"/>
            <remarks>
            A value of {{ default }} will be replaced with the built-in behavior, thus allowing you to extend it, or completely replace it.
            New in version Protocol: version '7'
            </remarks>
            <example> { "fingerprint": ["myrpc", "POST", "/foo.bar"] } </example>
            <example> { "fingerprint": ["{{ default }}", "http://example.com/my.url"] } </example>
        </member>
        <member name="T:Sentry.EventLikeExtensions">
            <summary>
            Extensions for <see cref="T:Sentry.IEventLike"/>.
            </summary>
        </member>
        <member name="M:Sentry.EventLikeExtensions.HasUser(Sentry.IEventLike)">
            <summary>
            Whether a <see cref="T:Sentry.User"/> has been set to the object with any of its fields non null.
            </summary>
        </member>
        <member name="M:Sentry.EventLikeExtensions.SetFingerprint(Sentry.IEventLike,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Sets the fingerprint to the object.
            </summary>
        </member>
        <member name="M:Sentry.EventLikeExtensions.SetFingerprint(Sentry.IEventLike,System.String[])">
            <summary>
            Sets the fingerprint to the object.
            </summary>
        </member>
        <member name="T:Sentry.IHasBreadcrumbs">
            <summary>
            Implemented by objects that contain breadcrumbs.
            </summary>
        </member>
        <member name="P:Sentry.IHasBreadcrumbs.Breadcrumbs">
            <summary>
            A trail of events which happened prior to an issue.
            </summary>
            <seealso href="https://docs.sentry.io/platforms/dotnet/enriching-events/breadcrumbs/"/>
        </member>
        <member name="M:Sentry.IHasBreadcrumbs.AddBreadcrumb(Sentry.Breadcrumb)">
            <summary>
            Adds a breadcrumb.
            </summary>
        </member>
        <member name="T:Sentry.HasBreadcrumbsExtensions">
            <summary>
            Extensions for <see cref="T:Sentry.IHasBreadcrumbs"/>.
            </summary>
        </member>
        <member name="M:Sentry.HasBreadcrumbsExtensions.AddBreadcrumb(Sentry.IHasBreadcrumbs,System.String,System.String,System.String,System.Nullable{System.ValueTuple{System.String,System.String}},Sentry.BreadcrumbLevel)">
            <summary>
            Adds a breadcrumb to the object.
            </summary>
            <param name="hasBreadcrumbs">The object.</param>
            <param name="message">The message.</param>
            <param name="category">The category.</param>
            <param name="type">The type.</param>
            <param name="dataPair">The data key-value pair.</param>
            <param name="level">The level.</param>
        </member>
        <member name="M:Sentry.HasBreadcrumbsExtensions.AddBreadcrumb(Sentry.IHasBreadcrumbs,System.String,System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},Sentry.BreadcrumbLevel)">
            <summary>
            Adds a breadcrumb to the object.
            </summary>
            <param name="hasBreadcrumbs">The object.</param>
            <param name="message">The message.</param>
            <param name="category">The category.</param>
            <param name="type">The type.</param>
            <param name="data">The data.</param>
            <param name="level">The level.</param>
        </member>
        <member name="M:Sentry.HasBreadcrumbsExtensions.AddBreadcrumb(Sentry.IHasBreadcrumbs,System.Nullable{System.DateTimeOffset},System.String,System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},Sentry.BreadcrumbLevel)">
            <summary>
            Adds a breadcrumb to the object.
            </summary>
            <remarks>
            This overload is used for testing.
            </remarks>
            <param name="hasBreadcrumbs">The object.</param>
            <param name="timestamp">The timestamp</param>
            <param name="message">The message.</param>
            <param name="category">The category.</param>
            <param name="type">The type.</param>
            <param name="data">The data</param>
            <param name="level">The level.</param>
        </member>
        <member name="T:Sentry.IHasExtra">
            <summary>
            Implemented by objects that contain a map of untyped extra data.
            </summary>
        </member>
        <member name="P:Sentry.IHasExtra.Extra">
            <summary>
            An arbitrary mapping of additional metadata to store with the event.
            </summary>
        </member>
        <member name="M:Sentry.IHasExtra.SetExtra(System.String,System.Object)">
            <summary>
            Sets an extra.
            </summary>
        </member>
        <member name="T:Sentry.HasExtraExtensions">
            <summary>
            Extensions for <see cref="T:Sentry.IHasExtra"/>.
            </summary>
        </member>
        <member name="M:Sentry.HasExtraExtensions.SetExtras(Sentry.IHasExtra,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Sets the extra key-value pairs to the object.
            </summary>
        </member>
        <member name="T:Sentry.IHasTags">
            <summary>
            Implemented by objects that contain a map of tags.
            </summary>
        </member>
        <member name="P:Sentry.IHasTags.Tags">
            <summary>
            Arbitrary key-value for this event.
            </summary>
        </member>
        <member name="M:Sentry.IHasTags.SetTag(System.String,System.String)">
            <summary>
            Sets a tag.
            </summary>
        </member>
        <member name="M:Sentry.IHasTags.UnsetTag(System.String)">
            <summary>
            Removes a tag.
            </summary>
        </member>
        <member name="T:Sentry.HasTagsExtensions">
            <summary>
            Extensions for <see cref="T:Sentry.IHasTags"/>.
            </summary>
        </member>
        <member name="M:Sentry.HasTagsExtensions.SetTags(Sentry.IHasTags,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Set all items as tags.
            </summary>
        </member>
        <member name="T:Sentry.IHub">
            <summary>
            SDK API contract which combines a client and scope management.
            </summary>
            <remarks>
            The contract of which <see cref="T:Sentry.SentrySdk" /> exposes statically.
            This interface exist to allow better testability of integrations which otherwise
            would require dependency to the static <see cref="T:Sentry.SentrySdk" />.
            </remarks>
            <inheritdoc cref="T:Sentry.ISentryClient" />
            <inheritdoc cref="T:Sentry.ISentryScopeManager" />
        </member>
        <member name="P:Sentry.IHub.LastEventId">
            <summary>
            Last event id recorded in the current scope.
            </summary>
        </member>
        <member name="M:Sentry.IHub.StartTransaction(Sentry.ITransactionContext,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Starts a transaction.
            </summary>
        </member>
        <member name="M:Sentry.IHub.BindException(System.Exception,Sentry.ISpan)">
            <summary>
            Binds specified exception the specified span.
            </summary>
            <remarks>
            This method is used internally and is not meant for public use.
            </remarks>
        </member>
        <member name="M:Sentry.IHub.GetSpan">
            <summary>
            Gets the currently ongoing (not finished) span or <code>null</code> if none available.
            </summary>
        </member>
        <member name="M:Sentry.IHub.GetTraceHeader">
            <summary>
            Gets the Sentry trace header for the last active span.
            </summary>
        </member>
        <member name="M:Sentry.IHub.StartSession">
            <summary>
            Starts a new session.
            </summary>
        </member>
        <member name="M:Sentry.IHub.PauseSession">
            <summary>
            Pauses an active session.
            </summary>
        </member>
        <member name="M:Sentry.IHub.ResumeSession">
            <summary>
            Resumes an active session.
            If the session has been paused for longer than the duration of time specified in
            <see cref="P:Sentry.SentryOptions.AutoSessionTrackingInterval"/> then the paused session is
            ended and a new one is started instead.
            </summary>
        </member>
        <member name="M:Sentry.IHub.EndSession(Sentry.SessionEndStatus)">
            <summary>
            Ends the currently active session.
            </summary>
        </member>
        <member name="T:Sentry.IJsonSerializable">
            <summary>
            Sentry JsonSerializable.
            </summary>
        </member>
        <member name="M:Sentry.IJsonSerializable.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <summary>
            Writes the object as JSON.
            </summary>
            <remarks>
            Note: this method is meant only for internal use and is exposed due to a language limitation.
            Avoid relying on this method in user code.
            </remarks>
        </member>
        <member name="T:Sentry.Infrastructure.ConsoleDiagnosticLogger">
            <summary>
            Console logger used by the SDK to report its internal logging.
            </summary>
            <remarks>
            The default logger, usually replaced by a higher level logging adapter like Microsoft.Extensions.Logging.
            </remarks>
        </member>
        <member name="M:Sentry.Infrastructure.ConsoleDiagnosticLogger.#ctor(Sentry.SentryLevel)">
            <summary>
            Creates a new instance of <see cref="T:Sentry.Infrastructure.ConsoleDiagnosticLogger"/>.
            </summary>
        </member>
        <member name="M:Sentry.Infrastructure.ConsoleDiagnosticLogger.IsEnabled(Sentry.SentryLevel)">
            <summary>
            Whether the logger is enabled to the defined level.
            </summary>
        </member>
        <member name="M:Sentry.Infrastructure.ConsoleDiagnosticLogger.Log(Sentry.SentryLevel,System.String,System.Exception,System.Object[])">
            <summary>
            Log message with level, exception and parameters.
            </summary>
        </member>
        <member name="T:Sentry.Infrastructure.DebugDiagnosticLogger">
            <summary>
            Debug logger used by the SDK to report its internal logging.
            </summary>
            <remarks>
            Logger available when compiled in Debug mode. It's useful when debugging apps running under IIS which have no output to Console logger.
            </remarks>
        </member>
        <member name="M:Sentry.Infrastructure.DebugDiagnosticLogger.#ctor(Sentry.SentryLevel)">
            <summary>
            Creates a new instance of <see cref="T:Sentry.Infrastructure.DebugDiagnosticLogger"/>.
            </summary>
        </member>
        <member name="M:Sentry.Infrastructure.DebugDiagnosticLogger.IsEnabled(Sentry.SentryLevel)">
            <summary>
            Whether the logger is enabled to the defined level.
            </summary>
        </member>
        <member name="M:Sentry.Infrastructure.DebugDiagnosticLogger.Log(Sentry.SentryLevel,System.String,System.Exception,System.Object[])">
            <summary>
            Log message with level, exception and parameters.
            </summary>
        </member>
        <member name="T:Sentry.Infrastructure.ISystemClock">
            <summary>
            An abstraction to the system clock.
            </summary>
            <remarks>
            Agree to disagree with closing this: https://github.com/aspnet/Common/issues/151
            </remarks>
        </member>
        <member name="M:Sentry.Infrastructure.ISystemClock.GetUtcNow">
            <summary>
            Gets the current time in UTC.
            </summary>
        </member>
        <member name="T:Sentry.Infrastructure.SystemClock">
            <summary>
            Implementation of <see cref="T:Sentry.Infrastructure.ISystemClock"/> to help testability.
            </summary>
            <seealso cref="T:Sentry.Infrastructure.ISystemClock" />
        </member>
        <member name="F:Sentry.Infrastructure.SystemClock.Clock">
            <summary>
            System clock singleton.
            </summary>
        </member>
        <member name="M:Sentry.Infrastructure.SystemClock.GetUtcNow">
            <summary>
            Gets the current time in UTC.
            </summary>
            <remarks>
            Used for testability, calls: DateTimeOffset.UtcNow
            </remarks>
        </member>
        <member name="T:Sentry.Infrastructure.TraceDiagnosticLogger">
            <summary>
            Trace logger used by the SDK to report its internal logging.
            </summary>
            <remarks>
            Logger available when hooked to an IDE. It's useful when debugging apps running under IIS which have no output to Console logger.
            </remarks>
        </member>
        <member name="M:Sentry.Infrastructure.TraceDiagnosticLogger.#ctor(Sentry.SentryLevel)">
            <summary>
            Creates a new instance of <see cref="T:Sentry.Infrastructure.TraceDiagnosticLogger"/>.
            </summary>
        </member>
        <member name="M:Sentry.Infrastructure.TraceDiagnosticLogger.IsEnabled(Sentry.SentryLevel)">
            <summary>
            Whether the logger is enabled to the defined level.
            </summary>
        </member>
        <member name="M:Sentry.Infrastructure.TraceDiagnosticLogger.Log(Sentry.SentryLevel,System.String,System.Exception,System.Object[])">
            <summary>
            Log message with level, exception and parameters.
            </summary>
        </member>
        <member name="T:Sentry.Integrations.ISdkIntegration">
            <summary>
            An SDK Integration.
            </summary>
        </member>
        <member name="M:Sentry.Integrations.ISdkIntegration.Register(Sentry.IHub,Sentry.SentryOptions)">
            <summary>
            Registers this integration with the hub.
            </summary>
            <remarks>
            This method is invoked when the Hub is created.
            </remarks>
            <param name="hub">The hub.</param>
            <param name="options">The options.</param>
        </member>
        <member name="M:Sentry.Internal.BackgroundWorker.Dispose">
            <summary>
            Stops the background worker and waits for it to empty the queue until 'shutdownTimeout' is reached
            </summary>
            <inheritdoc />
        </member>
        <member name="T:Sentry.Internal.Constants">
            <summary>
            Internal Constant Values.
            </summary>
        </member>
        <member name="F:Sentry.Internal.Constants.DsnEnvironmentVariable">
            <summary>
            Sentry DSN environment variable.
            </summary>
        </member>
        <member name="F:Sentry.Internal.Constants.ReleaseEnvironmentVariable">
            <summary>
            Sentry release environment variable.
            </summary>
        </member>
        <member name="F:Sentry.Internal.Constants.EnvironmentEnvironmentVariable">
            <summary>
            Sentry environment, environment variable.
            </summary>
        </member>
        <member name="F:Sentry.Internal.Constants.ProductionEnvironmentSetting">
            <summary>
            Default Sentry environment setting.
            </summary>
            <remarks>Best Sentry practice is to always try and have a value for this setting.</remarks>
        </member>
        <member name="M:Sentry.Internal.DsnLocator.FindDsnStringOrDisable(System.Reflection.Assembly)">
            <summary>
            Attempts to find a DSN string statically (via env var, asm attribute). Returns Disabled token otherwise.
            </summary>
        </member>
        <member name="M:Sentry.Internal.DsnLocator.FindDsn(System.Reflection.Assembly)">
            <summary>
            Attempts to find a DSN string from the entry assembly's DsnAttribute.
            </summary>
            <returns>DSN string or null if none found.</returns>
        </member>
        <member name="P:Sentry.Internal.Extensions.JsonExtensions.SerializerOption">
            <summary>
            The Json options with a preset of rules that will remove dangerous and problematic
            data from the serialized object.
            </summary>
        </member>
        <member name="T:Sentry.Internal.Http.DefaultSentryHttpClientFactory">
            <summary>
            Default Sentry HttpClientFactory
            </summary>
            <inheritdoc />
        </member>
        <member name="M:Sentry.Internal.Http.DefaultSentryHttpClientFactory.Create(Sentry.SentryOptions)">
            <summary>
            Creates an <see cref="T:System.Net.Http.HttpClient" /> configure to call Sentry for the specified <see cref="T:Sentry.Dsn" />
            </summary>
            <param name="options">The HTTP options.</param>
            <returns></returns>
        </member>
        <member name="T:Sentry.Internal.Http.GzipBufferedRequestBodyHandler">
            <summary>
            Compresses the body of an HTTP request with GZIP while buffering the result.
            </summary>
            <remarks>
            This handler doesn't use 'Content-Encoding: chunked' as it sets the 'Content-Length' of the request.
            </remarks>
            <inheritdoc />
        </member>
        <member name="M:Sentry.Internal.Http.GzipBufferedRequestBodyHandler.#ctor(System.Net.Http.HttpMessageHandler,System.IO.Compression.CompressionLevel)">
            <summary>
            Creates a new instance of <see cref="T:Sentry.Internal.Http.GzipBufferedRequestBodyHandler" />.
            </summary>
            <param name="innerHandler">The actual handler which handles the request.</param>
            <param name="compressionLevel">The compression level to use.</param>
            <exception cref="T:System.InvalidOperationException">Constructing this type with <see cref="T:System.IO.Compression.CompressionLevel" />
            of value <see cref="F:System.IO.Compression.CompressionLevel.NoCompression" /> is an invalid operation.</exception>
            <inheritdoc />
        </member>
        <member name="M:Sentry.Internal.Http.GzipBufferedRequestBodyHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            Compresses the request body and sends a request with a buffered stream.
            </summary>
            <param name="request">The HTTP request to compress.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <inheritdoc />
        </member>
        <member name="T:Sentry.Internal.Http.GzipRequestBodyHandler">
            <summary>
            Compresses the body of an HTTP request with GZIP.
            </summary>
            <inheritdoc />
        </member>
        <member name="M:Sentry.Internal.Http.GzipRequestBodyHandler.#ctor(System.Net.Http.HttpMessageHandler,System.IO.Compression.CompressionLevel)">
            <summary>
            Creates a new instance of <see cref="T:Sentry.Internal.Http.GzipRequestBodyHandler" />.
            </summary>
            <param name="innerHandler">The actual handler which handles the request.</param>
            <param name="compressionLevel">The compression level to use.</param>
            <exception cref="T:System.InvalidOperationException">Constructing this type with <see cref="T:System.IO.Compression.CompressionLevel" />
            of value <see cref="F:System.IO.Compression.CompressionLevel.NoCompression" /> is an invalid operation.</exception>
            <inheritdoc />
        </member>
        <member name="M:Sentry.Internal.Http.GzipRequestBodyHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            Sends the request while compressing its payload.
            </summary>
            <param name="request">The HTTP request to compress.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
            <inheritdoc />
        </member>
        <member name="T:Sentry.Internal.Http.RetryAfterHandler">
            <summary>
            Retry After Handler which short-circuit requests following an HTTP 429.
            </summary>
            <seealso href="https://tools.ietf.org/html/rfc6585#section-4" />
            <seealso href="https://develop.sentry.dev/sdk/overview/#writing-an-sdk"/>
            <inheritdoc />
        </member>
        <member name="M:Sentry.Internal.Http.RetryAfterHandler.#ctor(System.Net.Http.HttpMessageHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:Sentry.Internal.Http.RetryAfterHandler"/> class.
            </summary>
            <param name="innerHandler">The inner handler which is responsible for processing the HTTP response messages.</param>
        </member>
        <member name="M:Sentry.Internal.Http.RetryAfterHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            Sends an HTTP request to the inner handler while verifying the Response status code for HTTP 429.
            </summary>
            <param name="request">The HTTP request message to send to the server.</param>
            <param name="cancellationToken">A cancellation token to cancel operation.</param>
            <returns>
            The task object representing the asynchronous operation.
            </returns>
            <inheritdoc />
        </member>
        <member name="M:Sentry.Internal.IInternalSdkIntegration.Unregister(Sentry.IHub)">
            <summary>
            Unregisters this integration with the hub.
            </summary>
            <remarks>
            This method is invoked when the Hub is disposed.
            </remarks>
            <param name="hub">The hub.</param>
        </member>
        <member name="T:Sentry.Internal.MonoSentryStackTraceFactory">
            <summary>
            Mono factory to <see cref="T:Sentry.SentryStackTrace" /> from an <see cref="T:System.Exception" />.
            </summary>
        </member>
        <member name="M:Sentry.Internal.MonoSentryStackTraceFactory.#ctor(Sentry.SentryOptions)">
            <summary>
            Creates an instance of <see cref="T:Sentry.Internal.MonoSentryStackTraceFactory"/>.
            </summary>
        </member>
        <member name="M:Sentry.Internal.MonoSentryStackTraceFactory.Create(System.Exception)">
            <summary>
            Creates a <see cref="T:Sentry.SentryStackTrace" /> from the optional <see cref="T:System.Exception" />.
            </summary>
            <param name="exception">The exception to create the stacktrace from.</param>
            <returns>A Sentry stack trace.</returns>
        </member>
        <member name="P:Sentry.Internal.ProcessInfo.StartupTime">
            <summary>
            When the code was initialized.
            </summary>
        </member>
        <member name="P:Sentry.Internal.ProcessInfo.BootTime">
            <summary>
            When the device was initialized.
            </summary>
        </member>
        <member name="T:Sentry.Internal.SentryJsonConverter">
            <summary>
            A converter that removes dangerous classes from being serialized,
            and, also formats some classes like Exception and Type.
            </summary>
        </member>
        <member name="T:Sentry.ISentryClient">
            <summary>
            Sentry Client interface.
            </summary>
        </member>
        <member name="P:Sentry.ISentryClient.IsEnabled">
            <summary>
            Whether the client is enabled or not.
            </summary>
        </member>
        <member name="M:Sentry.ISentryClient.CaptureEvent(Sentry.SentryEvent,Sentry.Scope)">
            <summary>
            Capture the event.
            </summary>
            <param name="evt">The event to be captured.</param>
            <param name="scope">An optional scope to be applied to the event.</param>
            <returns>The Id of the event.</returns>
        </member>
        <member name="M:Sentry.ISentryClient.CaptureUserFeedback(Sentry.UserFeedback)">
            <summary>
            Captures a user feedback.
            </summary>
            <param name="userFeedback">The user feedback to send to Sentry.</param>
        </member>
        <member name="M:Sentry.ISentryClient.CaptureTransaction(Sentry.Transaction)">
            <summary>
            Captures a transaction.
            </summary>
            <remarks>
            Note: this method is NOT meant to be called from user code!
            Instead, call <see cref="M:Sentry.ISpan.Finish(Sentry.SpanStatus)"/> on the transaction.
            </remarks>
            <param name="transaction">The transaction.</param>
        </member>
        <member name="M:Sentry.ISentryClient.CaptureSession(Sentry.SessionUpdate)">
            <summary>
            Captures a session update.
            </summary>
            <remarks>
            Note: this method is NOT meant to be called from user code!
            It will be called automatically by the SDK.
            </remarks>
            <param name="sessionUpdate">The update to send to Sentry.</param>
        </member>
        <member name="M:Sentry.ISentryClient.FlushAsync(System.TimeSpan)">
            <summary>
            Flushes events queued up.
            </summary>
            <param name="timeout">How long to wait for flush to finish.</param>
            <returns>A task to await for the flush operation.</returns>
        </member>
        <member name="T:Sentry.ISentryScopeManager">
            <summary>
            Scope management.
            </summary>
            <remarks>
            An implementation shall create new scopes and allow consumers
            modify the current scope.
            </remarks>
        </member>
        <member name="M:Sentry.ISentryScopeManager.ConfigureScope(System.Action{Sentry.Scope})">
            <summary>
            Configures the current scope.
            </summary>
            <param name="configureScope">The configure scope.</param>
        </member>
        <member name="M:Sentry.ISentryScopeManager.ConfigureScopeAsync(System.Func{Sentry.Scope,System.Threading.Tasks.Task})">
            <summary>
            Asynchronously configure the current scope.
            </summary>
            <param name="configureScope">The configure scope.</param>
            <returns>A task that completes when the callback is done or a completed task if the SDK is disabled.</returns>
        </member>
        <member name="M:Sentry.ISentryScopeManager.BindClient(Sentry.ISentryClient)">
            <summary>
            Binds the client to the current scope.
            </summary>
            <param name="client">The client.</param>
        </member>
        <member name="M:Sentry.ISentryScopeManager.PushScope">
            <summary>
            Pushes a new scope into the stack which is removed upon Dispose.
            </summary>
            <returns>A disposable which removes the scope
            from the environment when invoked.</returns>
        </member>
        <member name="M:Sentry.ISentryScopeManager.PushScope``1(``0)">
            <summary>
            Pushes a new scope into the stack which is removed upon Dispose.
            </summary>
            <param name="state">A state to associate with the scope.</param>
            <returns>A disposable which removes the scope
            from the environment when invoked.</returns>
        </member>
        <member name="M:Sentry.ISentryScopeManager.WithScope(System.Action{Sentry.Scope})">
            <summary>
            Runs the callback with a new scope which gets dropped at the end.
            </summary>
            <remarks>
            Pushes a new scope, runs the callback, pops the scope.
            </remarks>
            <see href="https://docs.sentry.io/platforms/dotnet/enriching-events/scopes/#local-scopes"/>
            <param name="scopeCallback">The callback to run with the one time scope.</param>
        </member>
        <member name="T:Sentry.ISentryScopeStateProcessor">
            <summary>
            Defines the logic for applying state onto a scope.
            </summary>
        </member>
        <member name="M:Sentry.ISentryScopeStateProcessor.Apply(Sentry.Scope,System.Object)">
            <summary>
            Applies state onto a scope.
            </summary>
        </member>
        <member name="T:Sentry.ISession">
            <summary>
            Session metadata.
            </summary>
        </member>
        <member name="P:Sentry.ISession.Id">
            <summary>
            Session auto-generated ID.
            </summary>
        </member>
        <member name="P:Sentry.ISession.DistinctId">
            <summary>
            Session distinct ID.
            </summary>
        </member>
        <member name="P:Sentry.ISession.StartTimestamp">
            <summary>
            Session start timestamp.
            </summary>
        </member>
        <member name="P:Sentry.ISession.Release">
            <summary>
            Release.
            </summary>
        </member>
        <member name="P:Sentry.ISession.Environment">
            <summary>
            Environment.
            </summary>
        </member>
        <member name="P:Sentry.ISession.IpAddress">
            <summary>
            IP address of the user.
            </summary>
        </member>
        <member name="P:Sentry.ISession.UserAgent">
            <summary>
            User agent.
            </summary>
        </member>
        <member name="P:Sentry.ISession.ErrorCount">
            <summary>
            Reported error count.
            </summary>
        </member>
        <member name="T:Sentry.ISpan">
            <summary>
            Span.
            </summary>
        </member>
        <member name="P:Sentry.ISpan.Description">
            <summary>
            Span description.
            </summary>
        </member>
        <member name="P:Sentry.ISpan.Operation">
            <summary>
            Span operation.
            </summary>
        </member>
        <member name="P:Sentry.ISpan.Status">
            <summary>
            Span status.
            </summary>
        </member>
        <member name="M:Sentry.ISpan.StartChild(System.String)">
            <summary>
            Starts a child span.
            </summary>
        </member>
        <member name="M:Sentry.ISpan.Finish">
            <summary>
            Finishes the span.
            </summary>
        </member>
        <member name="M:Sentry.ISpan.Finish(Sentry.SpanStatus)">
            <summary>
            Finishes the span with the specified status.
            </summary>
        </member>
        <member name="M:Sentry.ISpan.Finish(System.Exception,Sentry.SpanStatus)">
            <summary>
            Finishes the span with the specified exception and status.
            </summary>
        </member>
        <member name="M:Sentry.ISpan.Finish(System.Exception)">
            <summary>
            Finishes the span with the specified exception and automatically inferred status.
            </summary>
        </member>
        <member name="T:Sentry.SpanExtensions">
            <summary>
            Extensions for <see cref="T:Sentry.ISpan"/>.
            </summary>
        </member>
        <member name="M:Sentry.SpanExtensions.StartChild(Sentry.ISpan,System.String,System.String)">
            <summary>
            Starts a child span.
            </summary>
        </member>
        <member name="T:Sentry.ISpanContext">
            <summary>
            Span metadata.
            </summary>
        </member>
        <member name="T:Sentry.ISpanData">
            <summary>
            Immutable data belonging to a span.
            </summary>
        </member>
        <member name="P:Sentry.ISpanData.StartTimestamp">
            <summary>
            Start timestamp.
            </summary>
        </member>
        <member name="P:Sentry.ISpanData.EndTimestamp">
            <summary>
            End timestamp.
            </summary>
        </member>
        <member name="P:Sentry.ISpanData.IsFinished">
            <summary>
            Whether the span is finished.
            </summary>
        </member>
        <member name="M:Sentry.ISpanData.GetTraceHeader">
            <summary>
            Get Sentry trace header.
            </summary>
        </member>
        <member name="T:Sentry.ITransaction">
            <summary>
            Transaction.
            </summary>
        </member>
        <member name="P:Sentry.ITransaction.Name">
            <summary>
            Transaction name.
            </summary>
        </member>
        <member name="P:Sentry.ITransaction.IsParentSampled">
            <summary>
            Whether the parent transaction of this transaction has been sampled.
            </summary>
        </member>
        <member name="P:Sentry.ITransaction.Spans">
            <summary>
            Flat list of spans within this transaction.
            </summary>
        </member>
        <member name="M:Sentry.ITransaction.GetLastActiveSpan">
            <summary>
            Gets the last active (not finished) span in this transaction.
            </summary>
        </member>
        <member name="T:Sentry.ITransactionContext">
            <summary>
            Transaction metadata.
            </summary>
        </member>
        <member name="P:Sentry.ITransactionContext.Name">
            <summary>
            Transaction name.
            </summary>
        </member>
        <member name="P:Sentry.ITransactionContext.IsParentSampled">
            <summary>
            Whether the parent transaction of this transaction has been sampled.
            </summary>
        </member>
        <member name="T:Sentry.ITransactionData">
            <summary>
            Immutable data belonging to a transaction.
            </summary>
        </member>
        <member name="T:Sentry.Package">
            <summary>
            Represents a package used to compose the SDK.
            </summary>
        </member>
        <member name="P:Sentry.Package.Name">
            <summary>
            The name of the package.
            </summary>
            <example>
            nuget:Sentry
            nuget:Sentry.AspNetCore
            </example>
        </member>
        <member name="P:Sentry.Package.Version">
            <summary>
            The version of the package.
            </summary>
            <example>
            1.0.0-rc1
            </example>
        </member>
        <member name="M:Sentry.Package.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of a <see cref="T:Sentry.Package"/>.
            </summary>
            <param name="name">The package name.</param>
            <param name="version">The package version.</param>
        </member>
        <member name="M:Sentry.Package.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc />
        </member>
        <member name="M:Sentry.Package.FromJson(System.Text.Json.JsonElement)">
            <summary>
            Parses from JSON.
            </summary>
        </member>
        <member name="T:Sentry.PlatformAbstractions.FrameworkInfo">
            <summary>
            Information about .NET Framework in the running machine
            The purpose of this partial class is to expose the API to all targets
            For netstandard, the call to methods will be a simple no-op.
            </summary>
            <summary>
            No-op version for netstandard targets
            </summary>
        </member>
        <member name="P:Sentry.PlatformAbstractions.FrameworkInfo.NetFxReleaseVersionMap">
            <summary>
            The map between release number and version number
            </summary>
            <see href="https://docs.microsoft.com/en-us/dotnet/framework/migration-guide/how-to-determine-which-versions-are-installed" />
        </member>
        <member name="M:Sentry.PlatformAbstractions.FrameworkInfo.GetLatest(System.Int32)">
            <summary>
            No-op version for netstandard targets
            </summary>
            <param name="clr"></param>
            <returns></returns>
        </member>
        <member name="M:Sentry.PlatformAbstractions.FrameworkInfo.GetInstallations">
            <summary>
            No-op version for netstandard targets
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sentry.PlatformAbstractions.FrameworkInstallation">
            <summary>
            A .NET Framework installation
            </summary>
            <seealso href="https://en.wikipedia.org/wiki/.NET_Framework_version_history"/>
            <seealso href="https://docs.microsoft.com/en-us/dotnet/framework/migration-guide/how-to-determine-which-versions-are-installed"/>
        </member>
        <member name="P:Sentry.PlatformAbstractions.FrameworkInstallation.ShortName">
            <summary>
            Short name
            </summary>
            <example>
            v2.0.50727, v3.5, v4.0
            </example>
        </member>
        <member name="P:Sentry.PlatformAbstractions.FrameworkInstallation.Version">
            <summary>
            Version
            </summary>
            <example>
            2.0.50727.4927, 3.0.30729.4926, 3.5.30729.4926
            </example>
        </member>
        <member name="P:Sentry.PlatformAbstractions.FrameworkInstallation.ServicePack">
            <summary>
            Service pack number, if any
            </summary>
            <remarks>
            Only relevant prior to .NET 4
            </remarks>
        </member>
        <member name="P:Sentry.PlatformAbstractions.FrameworkInstallation.Profile">
            <summary>
            Type of Framework profile
            </summary>
            <remarks>Only relevant for .NET 3.5 and 4.0</remarks>
            <seealso href="https://docs.microsoft.com/en-us/dotnet/framework/deployment/client-profile"/>
        </member>
        <member name="P:Sentry.PlatformAbstractions.FrameworkInstallation.Release">
            <summary>
             A .NET Framework release key
            </summary>
            <remarks>
            Windows registry key:
            HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\NET Framework Setup\NDP\v4\Full\Release
            Only applicable when on Windows, with full .NET Framework 4.5 and later.
            </remarks>
            <see href="https://docs.microsoft.com/en-us/dotnet/framework/migration-guide/how-to-determine-which-versions-are-installed"/>
        </member>
        <member name="M:Sentry.PlatformAbstractions.FrameworkInstallation.ToString">
            <inheritdoc />
        </member>
        <member name="T:Sentry.PlatformAbstractions.FrameworkProfile">
            <summary>
            Type of Framework profile
            </summary>
            <remarks>Only relevant for .NET 3.5 and 4.0</remarks>
            <seealso href="https://docs.microsoft.com/en-us/dotnet/framework/deployment/client-profile"/>
        </member>
        <member name="F:Sentry.PlatformAbstractions.FrameworkProfile.Client">
            <summary>
            The .NET Client Profile is a subset of the .NET Framework
            </summary>
        </member>
        <member name="F:Sentry.PlatformAbstractions.FrameworkProfile.Full">
            <summary>
            The full .NET Framework
            </summary>
        </member>
        <member name="T:Sentry.PlatformAbstractions.Runtime">
            <summary>
            Details of the runtime
            </summary>
        </member>
        <member name="P:Sentry.PlatformAbstractions.Runtime.Current">
            <summary>
            Gets the current runtime
            </summary>
            <value>
            The current runtime.
            </value>
        </member>
        <member name="P:Sentry.PlatformAbstractions.Runtime.Name">
            <summary>
            The name of the runtime
            </summary>
            <example>
            .NET Framework, .NET Native, Mono
            </example>
        </member>
        <member name="P:Sentry.PlatformAbstractions.Runtime.Version">
            <summary>
            The version of the runtime
            </summary>
            <example>
            4.7.2633.0
            </example>
        </member>
        <member name="P:Sentry.PlatformAbstractions.Runtime.Raw">
            <summary>
            The raw value parsed to extract Name and Version
            </summary>
            <remarks>
            This property will contain a value when the underlying API
            returned Name and Version as a single string which required parsing.
            </remarks>
        </member>
        <member name="M:Sentry.PlatformAbstractions.Runtime.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new Runtime instance
            </summary>
        </member>
        <member name="M:Sentry.PlatformAbstractions.Runtime.ToString">
            <summary>
            The string representation of the Runtime
            </summary>
        </member>
        <member name="M:Sentry.PlatformAbstractions.Runtime.Equals(Sentry.PlatformAbstractions.Runtime)">
            <summary>
            Compare instances for equality.
            </summary>
            <param name="other">The instance to compare against.</param>
            <returns>True if the instances are equal by reference or its state.</returns>
        </member>
        <member name="M:Sentry.PlatformAbstractions.Runtime.Equals(System.Object)">
            <summary>
            Compare instances for equality.
            </summary>
            <param name="obj">The instance to compare against.</param>
            <returns>True if the instances are equal by reference or its state.</returns>
        </member>
        <member name="M:Sentry.PlatformAbstractions.Runtime.GetHashCode">
            <summary>
            Get the hashcode of this instance.
            </summary>
            <returns>The hashcode of the instance.</returns>
        </member>
        <member name="T:Sentry.PlatformAbstractions.RuntimeExtensions">
            <summary>
            Extension method to the <see cref="T:Sentry.PlatformAbstractions.Runtime"/> class.
            </summary>
        </member>
        <member name="M:Sentry.PlatformAbstractions.RuntimeExtensions.IsNetFx(Sentry.PlatformAbstractions.Runtime)">
            <summary>
            Is the runtime instance .NET Framework.
            </summary>
            <param name="runtime">The runtime instance to check.</param>
            <returns>True if it's .NET Framework, otherwise false.</returns>
        </member>
        <member name="M:Sentry.PlatformAbstractions.RuntimeExtensions.IsNetCore(Sentry.PlatformAbstractions.Runtime)">
            <summary>
            Is the runtime instance .NET Core.
            </summary>
            <param name="runtime">The runtime instance to check.</param>
            <returns>True if it's .NET Core, otherwise false.</returns>
        </member>
        <member name="M:Sentry.PlatformAbstractions.RuntimeExtensions.IsMono(Sentry.PlatformAbstractions.Runtime)">
            <summary>
            Is the runtime instance Mono.
            </summary>
            <param name="runtime">The runtime instance to check.</param>
            <returns>True if it's Mono, otherwise false.</returns>
        </member>
        <member name="M:Sentry.PlatformAbstractions.RuntimeInfo.GetRuntime">
            <summary>
            Gets the current runtime.
            </summary>
            <returns>A new instance for the current runtime</returns>
        </member>
        <member name="T:Sentry.Contexts">
            <summary>
            Represents Sentry's structured Context.
            </summary>
            <seealso href="https://develop.sentry.dev/sdk/event-payloads/contexts/" />
        </member>
        <member name="P:Sentry.Contexts.App">
            <summary>
            Describes the application.
            </summary>
        </member>
        <member name="P:Sentry.Contexts.Browser">
            <summary>
            Describes the browser.
            </summary>
        </member>
        <member name="P:Sentry.Contexts.Device">
            <summary>
            Describes the device.
            </summary>
        </member>
        <member name="P:Sentry.Contexts.OperatingSystem">
            <summary>
            Defines the operating system.
            </summary>
            <remarks>
            In web contexts, this is the operating system of the browser (normally pulled from the User-Agent string).
            </remarks>
        </member>
        <member name="P:Sentry.Contexts.Runtime">
            <summary>
            This describes a runtime in more detail.
            </summary>
        </member>
        <member name="P:Sentry.Contexts.Gpu">
            <summary>
            This describes a GPU of the device.
            </summary>
        </member>
        <member name="P:Sentry.Contexts.Trace">
            <summary>
            This describes trace information.
            </summary>
        </member>
        <member name="M:Sentry.Contexts.#ctor">
            <summary>
            Initializes an instance of <see cref="T:Sentry.Contexts"/>.
            </summary>
        </member>
        <member name="M:Sentry.Contexts.Clone">
            <summary>
            Creates a deep clone of this context.
            </summary>
        </member>
        <member name="M:Sentry.Contexts.CopyTo(Sentry.Contexts)">
            <summary>
            Copies the items of the context while cloning the known types.
            </summary>
        </member>
        <member name="M:Sentry.Contexts.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc />
        </member>
        <member name="M:Sentry.Contexts.FromJson(System.Text.Json.JsonElement)">
            <summary>
            Parses from JSON.
            </summary>
        </member>
        <member name="T:Sentry.Reflection.AssemblyExtensions">
            <summary>
            Extension methods to <see cref="T:System.Reflection.Assembly"/>.
            </summary>
        </member>
        <member name="M:Sentry.Reflection.AssemblyExtensions.GetNameAndVersion(System.Reflection.Assembly)">
            <summary>
            Get the assemblies Name and Version.
            </summary>
            <remarks>
            Attempts to read the version from <see cref="T:System.Reflection.AssemblyInformationalVersionAttribute"/>.
            If not available, falls back to <see cref="P:System.Reflection.AssemblyName.Version"/>.
            </remarks>
            <param name="asm">The assembly to get the name and version from.</param>
            <returns>The SdkVersion.</returns>
        </member>
        <member name="T:Sentry.ReportAssembliesMode">
            <summary>
            Possible modes for reporting the assemblies.
            </summary>
        </member>
        <member name="F:Sentry.ReportAssembliesMode.None">
            <summary>
            Don't report any assemblies.
            </summary>
        </member>
        <member name="F:Sentry.ReportAssembliesMode.Version">
            <summary>
            Report assemblies and use the assembly version to determine the version.
            </summary>
        </member>
        <member name="F:Sentry.ReportAssembliesMode.InformationalVersion">
            <summary>
            Report assemblies and prefer the informational assembly version to determine the version. If
            the informational assembly version is not available, fall back to the assembly version.
            </summary>
        </member>
        <member name="T:Sentry.Request">
            <summary>
            Sentry HTTP interface.
            </summary>
            <example>
            "request": {
                "url": "http://absolute.uri/foo",
                "method": "POST",
                "data": {
                    "foo": "bar"
                },
                "query_string": "hello=world",
                "cookies": "foo=bar",
                "headers": {
                    "Content-Type": "text/html"
                },
                "env": {
                    "REMOTE_ADDR": "192.168.0.1"
                }
            }
            </example>
            <see href="https://develop.sentry.dev/sdk/event-payloads/request/"/>
        </member>
        <member name="P:Sentry.Request.Url">
            <summary>
            Gets or sets the full request URL, if available.
            </summary>
            <value>The request URL.</value>
        </member>
        <member name="P:Sentry.Request.Method">
            <summary>
            Gets or sets the method of the request.
            </summary>
            <value>The HTTP method.</value>
        </member>
        <member name="P:Sentry.Request.Data">
            <summary>
            Submitted data in whatever format makes most sense.
            </summary>
            <remarks>
            This data should not be provided by default as it can get quite large.
            </remarks>
            <value>The request payload.</value>
        </member>
        <member name="P:Sentry.Request.QueryString">
            <summary>
            Gets or sets the unparsed query string.
            </summary>
            <value>The query string.</value>
        </member>
        <member name="P:Sentry.Request.Cookies">
            <summary>
            Gets or sets the cookies.
            </summary>
            <value>The cookies.</value>
        </member>
        <member name="P:Sentry.Request.Headers">
            <summary>
            Gets or sets the headers.
            </summary>
            <remarks>
            If a header appears multiple times it needs to be merged according to the HTTP standard for header merging.
            </remarks>
            <value>The headers.</value>
        </member>
        <member name="P:Sentry.Request.Env">
            <summary>
            Gets or sets the optional environment data.
            </summary>
            <remarks>
            This is where information such as IIS/CGI keys go that are not HTTP headers.
            </remarks>
            <value>The env.</value>
        </member>
        <member name="P:Sentry.Request.Other">
            <summary>
            Gets or sets some optional other data.
            </summary>
            <value>The other.</value>
        </member>
        <member name="M:Sentry.Request.Clone">
            <summary>
            Clones this instance.
            </summary>
            <remarks>
            This is a shallow copy.
            References like <see cref="P:Sentry.Request.Data"/> could hold a mutable, non-thread-safe object.
            </remarks>
        </member>
        <member name="M:Sentry.Request.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc />
        </member>
        <member name="M:Sentry.Request.FromJson(System.Text.Json.JsonElement)">
            <summary>
            Parses from JSON.
            </summary>
        </member>
        <member name="T:Sentry.Scope">
            <summary>
            Scope data to be sent with the event.
            </summary>
            <remarks>
            Scope data is sent together with any event captured
            during the lifetime of the scope.
            </remarks>
        </member>
        <member name="P:Sentry.Scope.HasEvaluated">
            <summary>
            Whether the <see cref="E:Sentry.Scope.OnEvaluating"/> event has already fired.
            </summary>
        </member>
        <member name="P:Sentry.Scope.ExceptionProcessors">
            <summary>
            A list of exception processors.
            </summary>
        </member>
        <member name="P:Sentry.Scope.EventProcessors">
            <summary>
            A list of event processors.
            </summary>
        </member>
        <member name="E:Sentry.Scope.OnEvaluating">
            <summary>
            An event that fires when the scope evaluates.
            </summary>
            <remarks>
            This allows registering an event handler that is invoked in case
            an event is about to be sent to Sentry. If an event is never sent,
            this event is never fired and the resources spared.
            It also allows registration at an early stage of the processing
            but execution at a later time, when more data is available.
            </remarks>
            <see cref="M:Sentry.Scope.Evaluate"/>
        </member>
        <member name="P:Sentry.Scope.Level">
            <inheritdoc />
        </member>
        <member name="P:Sentry.Scope.Request">
            <inheritdoc />
        </member>
        <member name="P:Sentry.Scope.Contexts">
            <inheritdoc />
        </member>
        <member name="P:Sentry.Scope.User">
            <inheritdoc />
        </member>
        <member name="P:Sentry.Scope.Platform">
            <inheritdoc />
        </member>
        <member name="P:Sentry.Scope.Release">
            <inheritdoc />
        </member>
        <member name="P:Sentry.Scope.Environment">
            <inheritdoc />
        </member>
        <member name="P:Sentry.Scope.TransactionName">
            <inheritdoc />
        </member>
        <member name="P:Sentry.Scope.Transaction">
            <summary>
            Transaction.
            </summary>
        </member>
        <member name="P:Sentry.Scope.Sdk">
            <inheritdoc />
        </member>
        <member name="P:Sentry.Scope.Fingerprint">
            <inheritdoc />
        </member>
        <member name="P:Sentry.Scope.Breadcrumbs">
            <inheritdoc />
        </member>
        <member name="P:Sentry.Scope.Extra">
            <inheritdoc />
        </member>
        <member name="P:Sentry.Scope.Tags">
            <inheritdoc />
        </member>
        <member name="P:Sentry.Scope.Attachments">
            <summary>
            Attachments.
            </summary>
        </member>
        <member name="M:Sentry.Scope.#ctor(Sentry.SentryOptions)">
            <summary>
            Creates a scope with the specified options.
            </summary>
        </member>
        <member name="M:Sentry.Scope.AddBreadcrumb(Sentry.Breadcrumb)">
            <inheritdoc />
        </member>
        <member name="M:Sentry.Scope.SetExtra(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Sentry.Scope.SetTag(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Sentry.Scope.UnsetTag(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Sentry.Scope.AddAttachment(Sentry.Attachment)">
            <summary>
            Adds an attachment.
            </summary>
        </member>
        <member name="M:Sentry.Scope.ClearAttachments">
            <summary>
            Clear all Attachments.
            </summary>
        </member>
        <member name="M:Sentry.Scope.Apply(Sentry.IEventLike)">
            <summary>
            Applies the data from this scope to another event-like object.
            </summary>
            <param name="other">The scope to copy data to.</param>
            <remarks>
            Applies the data of 'from' into 'to'.
            If data in 'from' is null, 'to' is unmodified.
            Conflicting keys are not overriden.
            This is a shallow copy.
            </remarks>
        </member>
        <member name="M:Sentry.Scope.Apply(Sentry.Scope)">
            <summary>
            Applies data from one scope to another.
            </summary>
        </member>
        <member name="M:Sentry.Scope.Apply(System.Object)">
            <summary>
            Applies the state object into the scope.
            </summary>
            <param name="state">The state object to apply.</param>
        </member>
        <member name="M:Sentry.Scope.Clone">
            <summary>
            Clones the current <see cref="T:Sentry.Scope"/>.
            </summary>
        </member>
        <member name="M:Sentry.Scope.GetSpan">
            <summary>
            Gets the currently ongoing (not finished) span or <code>null</code> if none available.
            This relies on the transactions being manually set on the scope via <see cref="P:Sentry.Scope.Transaction"/>.
            </summary>
        </member>
        <member name="T:Sentry.ScopeExtensions">
            <summary>
            Scope extensions.
            </summary>
        </member>
        <member name="M:Sentry.ScopeExtensions.GetAllEventProcessors(Sentry.Scope)">
            <summary>
            Invokes all event processor providers available.
            </summary>
            <param name="scope">The Scope which holds the processor providers.</param>
        </member>
        <member name="M:Sentry.ScopeExtensions.GetAllExceptionProcessors(Sentry.Scope)">
            <summary>
            Invokes all exception processor providers available.
            </summary>
            <param name="scope">The Scope which holds the processor providers.</param>
        </member>
        <member name="M:Sentry.ScopeExtensions.AddExceptionProcessor(Sentry.Scope,Sentry.Extensibility.ISentryEventExceptionProcessor)">
            <summary>
            Add an exception processor.
            </summary>
            <param name="scope">The Scope to hold the processor.</param>
            <param name="processor">The exception processor.</param>
        </member>
        <member name="M:Sentry.ScopeExtensions.AddExceptionProcessors(Sentry.Scope,System.Collections.Generic.IEnumerable{Sentry.Extensibility.ISentryEventExceptionProcessor})">
            <summary>
            Add the exception processors.
            </summary>
            <param name="scope">The Scope to hold the processor.</param>
            <param name="processors">The exception processors.</param>
        </member>
        <member name="M:Sentry.ScopeExtensions.AddEventProcessor(Sentry.Scope,Sentry.Extensibility.ISentryEventProcessor)">
            <summary>
            Adds an event processor which is invoked when creating a <see cref="T:Sentry.SentryEvent"/>.
            </summary>
            <param name="scope">The Scope to hold the processor.</param>
            <param name="processor">The event processor.</param>
        </member>
        <member name="M:Sentry.ScopeExtensions.AddEventProcessor(Sentry.Scope,System.Func{Sentry.SentryEvent,Sentry.SentryEvent})">
            <summary>
            Adds an event processor which is invoked when creating a <see cref="T:Sentry.SentryEvent"/>.
            </summary>
            <param name="scope">The Scope to hold the processor.</param>
            <param name="processor">The event processor.</param>
        </member>
        <member name="M:Sentry.ScopeExtensions.AddEventProcessors(Sentry.Scope,System.Collections.Generic.IEnumerable{Sentry.Extensibility.ISentryEventProcessor})">
            <summary>
            Adds event processors which are invoked when creating a <see cref="T:Sentry.SentryEvent"/>.
            </summary>
            <param name="scope">The Scope to hold the processor.</param>
            <param name="processors">The event processors.</param>
        </member>
        <member name="M:Sentry.ScopeExtensions.AddAttachment(Sentry.Scope,System.IO.Stream,System.String,Sentry.AttachmentType,System.String)">
            <summary>
            Adds an attachment.
            </summary>
            <remarks>
            Note: the stream must be seekable.
            </remarks>
        </member>
        <member name="M:Sentry.ScopeExtensions.AddAttachment(Sentry.Scope,System.Byte[],System.String,Sentry.AttachmentType,System.String)">
            <summary>
            Adds an attachment.
            </summary>
        </member>
        <member name="M:Sentry.ScopeExtensions.AddAttachment(Sentry.Scope,System.String,Sentry.AttachmentType,System.String)">
            <summary>
            Adds an attachment.
            </summary>
        </member>
        <member name="T:Sentry.SdkVersion">
            <summary>
            Information about the SDK to be sent with the SentryEvent.
            </summary>
            <remarks>Requires Sentry version 8.4 or higher.</remarks>
        </member>
        <member name="P:Sentry.SdkVersion.Packages">
            <summary>
            SDK packages.
            </summary>
            <remarks>This property is not required.</remarks>
        </member>
        <member name="P:Sentry.SdkVersion.Name">
            <summary>
            SDK name.
            </summary>
        </member>
        <member name="P:Sentry.SdkVersion.Version">
            <summary>
            SDK Version.
            </summary>
        </member>
        <member name="M:Sentry.SdkVersion.AddPackage(System.String,System.String)">
            <summary>
            Add a package used to compose the SDK.
            </summary>
            <param name="name">The package name.</param>
            <param name="version">The package version.</param>
        </member>
        <member name="M:Sentry.SdkVersion.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc />
        </member>
        <member name="M:Sentry.SdkVersion.FromJson(System.Text.Json.JsonElement)">
            <summary>
            Parses from JSON.
            </summary>
        </member>
        <member name="T:Sentry.SentryClient">
            <summary>
            Sentry client used to send events to Sentry.
            </summary>
            <remarks>
            This client captures events by queueing those to its
            internal background worker which sends events to Sentry.
            </remarks>
            <inheritdoc cref="T:Sentry.ISentryClient" />
            <inheritdoc cref="T:System.IDisposable" />
        </member>
        <member name="P:Sentry.SentryClient.IsEnabled">
            <summary>
            Whether the client is enabled.
            </summary>
            <inheritdoc />
        </member>
        <member name="M:Sentry.SentryClient.#ctor(Sentry.SentryOptions)">
            <summary>
            Creates a new instance of <see cref="T:Sentry.SentryClient"/>.
            </summary>
            <param name="options">The configuration for this client.</param>
        </member>
        <member name="M:Sentry.SentryClient.CaptureEvent(Sentry.SentryEvent,Sentry.Scope)">
            <inheritdoc />
        </member>
        <member name="M:Sentry.SentryClient.CaptureUserFeedback(Sentry.UserFeedback)">
            <inheritdoc />
        </member>
        <member name="M:Sentry.SentryClient.CaptureTransaction(Sentry.Transaction)">
            <inheritdoc />
        </member>
        <member name="M:Sentry.SentryClient.CaptureSession(Sentry.SessionUpdate)">
            <inheritdoc />
        </member>
        <member name="M:Sentry.SentryClient.FlushAsync(System.TimeSpan)">
            <summary>
            Flushes events asynchronously.
            </summary>
            <param name="timeout">How long to wait for flush to finish.</param>
            <returns>A task to await for the flush operation.</returns>
        </member>
        <member name="M:Sentry.SentryClient.CaptureEnvelope(Sentry.Protocol.Envelopes.Envelope)">
            <summary>
            Capture an envelope and queue it.
            </summary>
            <param name="envelope">The envelope.</param>
            <returns>true if the enveloped was queued, false otherwise.</returns>
        </member>
        <member name="M:Sentry.SentryClient.Dispose">
            <summary>
            Disposes this client
            </summary>
            <inheritdoc />
        </member>
        <member name="T:Sentry.SentryClientExtensions">
            <summary>
            Extension methods for <see cref="T:Sentry.ISentryClient"/>
            </summary>
        </member>
        <member name="M:Sentry.SentryClientExtensions.CaptureException(Sentry.ISentryClient,System.Exception)">
            <summary>
            Captures the exception.
            </summary>
            <param name="client">The Sentry client.</param>
            <param name="ex">The exception.</param>
            <returns>The Id of the event</returns>
        </member>
        <member name="M:Sentry.SentryClientExtensions.CaptureMessage(Sentry.ISentryClient,System.String,Sentry.SentryLevel)">
            <summary>
            Captures a message.
            </summary>
            <param name="client">The Sentry client.</param>
            <param name="message">The message to send.</param>
            <param name="level">The message level.</param>
            <returns>The Id of the event</returns>
        </member>
        <member name="M:Sentry.SentryClientExtensions.CaptureUserFeedback(Sentry.ISentryClient,Sentry.SentryId,System.String,System.String,System.String)">
            <summary>
            Captures a user feedback.
            </summary>
            <param name="client"></param>
            <param name="eventId">The event Id.</param>
            <param name="email">The user email.</param>
            <param name="comments">The user comments.</param>
            <param name="name">The optional username.</param>
        </member>
        <member name="T:Sentry.SentryEvent">
            <summary>
            An event to be sent to Sentry.
            </summary>
            <seealso href="https://develop.sentry.dev/sdk/event-payloads/" />
        </member>
        <member name="P:Sentry.SentryEvent.Exception">
            <summary>
            The <see cref="T:System.Exception"/> used to create this event.
            </summary>
            <remarks>
            The information from this exception is used by the Sentry SDK
            to add the relevant data to the event prior to sending to Sentry.
            </remarks>
        </member>
        <member name="P:Sentry.SentryEvent.EventId">
            <summary>
            The unique identifier of this event.
            </summary>
            <remarks>
            Hexadecimal string representing a uuid4 value.
            The length is exactly 32 characters (no dashes!).
            </remarks>
        </member>
        <member name="P:Sentry.SentryEvent.Timestamp">
            <summary>
            Indicates when the event was created.
            </summary>
            <example>2018-04-03T17:41:36</example>
        </member>
        <member name="P:Sentry.SentryEvent.Message">
            <summary>
            Gets the structured message that describes this event.
            </summary>
            <remarks>
            This helps Sentry group events together as the grouping happens
            on the template message instead of the result string message.
            </remarks>
            <example>
            SentryMessage will have a template like: 'user {0} logged in'
            Or structured logging template: '{user} has logged in'
            </example>
        </member>
        <member name="P:Sentry.SentryEvent.Logger">
            <summary>
            Name of the logger (or source) of the event.
            </summary>
        </member>
        <member name="P:Sentry.SentryEvent.Platform">
            <inheritdoc />
        </member>
        <member name="P:Sentry.SentryEvent.ServerName">
            <summary>
            Identifies the host SDK from which the event was recorded.
            </summary>
        </member>
        <member name="P:Sentry.SentryEvent.Release">
            <inheritdoc />
        </member>
        <member name="P:Sentry.SentryEvent.SentryExceptions">
            <summary>
            The Sentry Exception interface.
            </summary>
        </member>
        <member name="P:Sentry.SentryEvent.SentryThreads">
            <summary>
            The Sentry Thread interface.
            </summary>
            <see href="https://develop.sentry.dev/sdk/event-payloads/threads/"/>
        </member>
        <member name="P:Sentry.SentryEvent.Modules">
            <summary>
            A list of relevant modules and their versions.
            </summary>
        </member>
        <member name="P:Sentry.SentryEvent.Level">
            <inheritdoc />
        </member>
        <member name="P:Sentry.SentryEvent.TransactionName">
            <inheritdoc />
        </member>
        <member name="P:Sentry.SentryEvent.Request">
            <inheritdoc />
        </member>
        <member name="P:Sentry.SentryEvent.Contexts">
            <inheritdoc />
        </member>
        <member name="P:Sentry.SentryEvent.User">
            <inheritdoc />
        </member>
        <member name="P:Sentry.SentryEvent.Environment">
            <inheritdoc />
        </member>
        <member name="P:Sentry.SentryEvent.Sdk">
            <inheritdoc />
        </member>
        <member name="P:Sentry.SentryEvent.Fingerprint">
            <inheritdoc />
        </member>
        <member name="P:Sentry.SentryEvent.Breadcrumbs">
            <inheritdoc />
        </member>
        <member name="P:Sentry.SentryEvent.Extra">
            <inheritdoc />
        </member>
        <member name="P:Sentry.SentryEvent.Tags">
            <inheritdoc />
        </member>
        <member name="M:Sentry.SentryEvent.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Sentry.SentryEvent" />.
            </summary>
        </member>
        <member name="M:Sentry.SentryEvent.#ctor(System.Exception)">
            <summary>
            Creates a Sentry event with optional Exception details and default values like Id and Timestamp.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Sentry.SentryEvent.AddBreadcrumb(Sentry.Breadcrumb)">
            <inheritdoc />
        </member>
        <member name="M:Sentry.SentryEvent.SetExtra(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Sentry.SentryEvent.SetTag(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Sentry.SentryEvent.UnsetTag(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Sentry.SentryEvent.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc />
        </member>
        <member name="M:Sentry.SentryEvent.FromJson(System.Text.Json.JsonElement)">
            <summary>
            Parses from JSON.
            </summary>
        </member>
        <member name="T:Sentry.SentryHttpMessageHandler">
            <summary>
            Special HTTP message handler that can be used to propagate Sentry headers and other contextual information.
            </summary>
        </member>
        <member name="M:Sentry.SentryHttpMessageHandler.#ctor(Sentry.IHub)">
            <summary>
            Initializes an instance of <see cref="T:Sentry.SentryHttpMessageHandler"/>.
            </summary>
        </member>
        <member name="M:Sentry.SentryHttpMessageHandler.#ctor(System.Net.Http.HttpMessageHandler,Sentry.IHub)">
            <summary>
            Initializes an instance of <see cref="T:Sentry.SentryHttpMessageHandler"/>.
            </summary>
        </member>
        <member name="M:Sentry.SentryHttpMessageHandler.#ctor(System.Net.Http.HttpMessageHandler)">
            <summary>
            Initializes an instance of <see cref="T:Sentry.SentryHttpMessageHandler"/>.
            </summary>
        </member>
        <member name="M:Sentry.SentryHttpMessageHandler.#ctor">
            <summary>
            Initializes an instance of <see cref="T:Sentry.SentryHttpMessageHandler"/>.
            </summary>
        </member>
        <member name="M:Sentry.SentryHttpMessageHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Sentry.SentryId">
            <summary>
            The identifier of an event in Sentry.
            </summary>
        </member>
        <member name="F:Sentry.SentryId.Empty">
            <summary>
            An empty sentry id.
            </summary>
        </member>
        <member name="M:Sentry.SentryId.#ctor(System.Guid)">
            <summary>
            Creates a new instance of a Sentry Id.
            </summary>
        </member>
        <member name="M:Sentry.SentryId.ToString">
            <summary>
            Sentry Id in the format Sentry recognizes.
            </summary>
            <remarks>
            Default <see cref="M:Sentry.SentryId.ToString"/> of <see cref="T:System.Guid"/> includes
            dashes which sentry doesn't expect when searching events.
            </remarks>
            <returns>String representation of the event id.</returns>
        </member>
        <member name="M:Sentry.SentryId.Equals(Sentry.SentryId)">
            <inheritdoc />
        </member>
        <member name="M:Sentry.SentryId.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Sentry.SentryId.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Sentry.SentryId.Create">
            <summary>
            Generates a new Sentry ID.
            </summary>
        </member>
        <member name="M:Sentry.SentryId.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc />
        </member>
        <member name="M:Sentry.SentryId.Parse(System.String)">
            <summary>
            Parses from string.
            </summary>
        </member>
        <member name="M:Sentry.SentryId.FromJson(System.Text.Json.JsonElement)">
            <summary>
            Parses from JSON.
            </summary>
        </member>
        <member name="M:Sentry.SentryId.op_Equality(Sentry.SentryId,Sentry.SentryId)">
            <summary>
            Equality operator.
            </summary>
        </member>
        <member name="M:Sentry.SentryId.op_Inequality(Sentry.SentryId,Sentry.SentryId)">
            <summary>
            Equality operator.
            </summary>
        </member>
        <member name="M:Sentry.SentryId.op_Implicit(Sentry.SentryId)~System.Guid">
            <summary>
            The <see cref="T:System.Guid"/> from the <see cref="T:Sentry.SentryId"/>.
            </summary>
        </member>
        <member name="M:Sentry.SentryId.op_Implicit(System.Guid)~Sentry.SentryId">
            <summary>
            A <see cref="T:Sentry.SentryId"/> from a <see cref="T:System.Guid"/>.
            </summary>
        </member>
        <member name="T:Sentry.SentryLevel">
            <summary>
            The level of the event sent to Sentry.
            </summary>
        </member>
        <member name="F:Sentry.SentryLevel.Debug">
            <summary>
            Debug.
            </summary>
        </member>
        <member name="F:Sentry.SentryLevel.Info">
            <summary>
            Informational.
            </summary>
        </member>
        <member name="F:Sentry.SentryLevel.Warning">
            <summary>
            Warning.
            </summary>
        </member>
        <member name="F:Sentry.SentryLevel.Error">
            <summary>
            Error.
            </summary>
        </member>
        <member name="F:Sentry.SentryLevel.Fatal">
            <summary>
            Fatal.
            </summary>
        </member>
        <member name="T:Sentry.SentryMessage">
            <summary>
            Sentry Message interface.
            </summary>
            <remarks>
            This interface enables support to structured logging.
            </remarks>
            <example>
            "sentry.interfaces.Message": {
              "message": "Message for event: {eventId}",
              "params": [10]
            }
            </example>
            <seealso href="https://develop.sentry.dev/sdk/event-payloads/message/"/>
        </member>
        <member name="P:Sentry.SentryMessage.Message">
            <summary>
            The raw message string (un-interpolated).
            </summary>
            <remarks>
            Must be no more than 1000 characters in length.
            </remarks>
        </member>
        <member name="P:Sentry.SentryMessage.Params">
            <summary>
            The optional list of formatting parameters.
            </summary>
        </member>
        <member name="P:Sentry.SentryMessage.Formatted">
            <summary>
            The formatted message.
            </summary>
        </member>
        <member name="M:Sentry.SentryMessage.op_Implicit(System.String)~Sentry.SentryMessage">
            <summary>
            Coerces <see cref="T:System.String"/> into <see cref="T:Sentry.SentryMessage"/>.
            </summary>
        </member>
        <member name="M:Sentry.SentryMessage.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc />
        </member>
        <member name="M:Sentry.SentryMessage.FromJson(System.Text.Json.JsonElement)">
            <summary>
            Parses from JSON.
            </summary>
        </member>
        <member name="T:Sentry.SentryOptions">
            <summary>
            Sentry SDK options
            </summary>
        </member>
        <member name="P:Sentry.SentryOptions.IsGlobalModeEnabled">
            <summary>
            Specifies whether to use global scope management mode.
            </summary>
        </member>
        <member name="P:Sentry.SentryOptions.ExceptionProcessors">
            <summary>
            A list of exception processors
            </summary>
        </member>
        <member name="P:Sentry.SentryOptions.EventProcessors">
            <summary>
            A list of event processors
            </summary>
        </member>
        <member name="P:Sentry.SentryOptions.EventProcessorsProviders">
            <summary>
            A list of providers of <see cref="T:Sentry.Extensibility.ISentryEventProcessor"/>
            </summary>
        </member>
        <member name="P:Sentry.SentryOptions.ExceptionProcessorsProviders">
            <summary>
            A list of providers of <see cref="T:Sentry.Extensibility.ISentryEventExceptionProcessor"/>
            </summary>
        </member>
        <member name="P:Sentry.SentryOptions.Integrations">
            <summary>
            A list of integrations to be added when the SDK is initialized.
            </summary>
        </member>
        <member name="P:Sentry.SentryOptions.SentryScopeStateProcessor">
            <summary>
            Scope state processor.
            </summary>
        </member>
        <member name="P:Sentry.SentryOptions.InAppExclude">
            <summary>
            A list of namespaces (or prefixes) considered not part of application code
            </summary>
            <remarks>
            Sentry by default filters the stacktrace to display only application code.
            A user can optionally click to see all which will include framework and libraries.
            A <see cref="M:System.String.StartsWith(System.String)"/> is executed
            </remarks>
            <example>
            'System.', 'Microsoft.'
            </example>
        </member>
        <member name="P:Sentry.SentryOptions.InAppInclude">
            <summary>
            A list of namespaces (or prefixes) considered part of application code
            </summary>
            <remarks>
            Sentry by default filters the stacktrace to display only application code.
            A user can optionally click to see all which will include framework and libraries.
            A <see cref="M:System.String.StartsWith(System.String)"/> is executed
            </remarks>
            <example>
            'System.CustomNamespace', 'Microsoft.Azure.App'
            </example>
            <seealso href="https://docs.sentry.io/platforms/dotnet/guides/aspnet/configuration/options/#in-app-include"/>
        </member>
        <member name="P:Sentry.SentryOptions.SendDefaultPii">
            <summary>
            Whether to include default Personal Identifiable information
            </summary>
            <remarks>
            By default PII data like Username and Client IP address are not sent to Sentry.
            When this flag is turned on, default PII data like Cookies, Claims in Web applications
            and user data read from the request are sent.
            </remarks>
        </member>
        <member name="P:Sentry.SentryOptions.IsEnvironmentUser">
            <summary>
            Whether to report the <see cref="P:System.Environment.UserName"/> as the User affected in the event.
            </summary>
            <remarks>
            This configuration is only relevant is <see cref="P:Sentry.SentryOptions.SendDefaultPii"/> is set to true.
            In environments like server applications this is set to false in order to not report server account names as user names.
            </remarks>
        </member>
        <member name="P:Sentry.SentryOptions.ServerName">
            <summary>
            Gets or sets the name of the server running the application.
            </summary>
            <remarks>
            When <see cref="P:Sentry.SentryOptions.SendDefaultPii"/> is set to <c>true</c>, <see cref="P:System.Environment.MachineName"/> is
            automatically set as ServerName. This property can serve as an override.
            This is relevant only to server applications.
            </remarks>
        </member>
        <member name="P:Sentry.SentryOptions.AttachStacktrace">
            <summary>
            Whether to send the stack trace of a event captured without an exception
            </summary>
            <remarks>
            Append stack trace of the call to the SDK to capture a message or event without Exception
            </remarks>
        </member>
        <member name="P:Sentry.SentryOptions.MaxBreadcrumbs">
            <summary>
            Gets or sets the maximum breadcrumbs.
            </summary>
            <remarks>
            When the number of events reach this configuration value,
            older breadcrumbs start dropping to make room for new ones.
            </remarks>
            <value>
            The maximum breadcrumbs per scope.
            </value>
        </member>
        <member name="F:Sentry.SentryOptions._sampleRate">
            <summary>
            The rate to sample events
            </summary>
            <remarks>
            Can be anything between 0.01 (1%) and 1.0 (99.9%) or null (default), to disable it.
            </remarks>
            <example>
            0.1 = 10% of events are sent
            </example>
            <see href="https://develop.sentry.dev/sdk/features/#event-sampling"/>
        </member>
        <member name="P:Sentry.SentryOptions.SampleRate">
            <summary>
            The optional sample rate.
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="P:Sentry.SentryOptions.Release">
            <summary>
            The release version of the application.
            </summary>
            <example>
            721e41770371db95eee98ca2707686226b993eda
            14.1.16.32451
            </example>
            <remarks>
            This value will generally be something along the lines of the git SHA for the given project.
            If not explicitly defined via configuration or environment variable (SENTRY_RELEASE).
            It will attempt to read it from:
            <see cref="T:System.Reflection.AssemblyInformationalVersionAttribute"/>
            </remarks>
            <seealso href="https://docs.sentry.io/platforms/dotnet/configuration/releases/"/>
        </member>
        <member name="P:Sentry.SentryOptions.Environment">
            <summary>
            The environment the application is running
            </summary>
            <remarks>
            This value can also be set via environment variable: SENTRY_ENVIRONMENT
            In some cases you don't need to set this manually since integrations, when possible, automatically fill this value.
            For ASP.NET Core which can read from IHostingEnvironment
            </remarks>
            <example>
            Production, Staging
            </example>
            <seealso href="https://docs.sentry.io/platforms/dotnet/configuration/environments/"/>
        </member>
        <member name="P:Sentry.SentryOptions.Dsn">
            <summary>
            The Data Source Name of a given project in Sentry.
            </summary>
        </member>
        <member name="P:Sentry.SentryOptions.BeforeSend">
            <summary>
            A callback to invoke before sending an event to Sentry
            </summary>
            <remarks>
            The return of this event will be sent to Sentry. This allows the application
            a chance to inspect and/or modify the event before it's sent. If the event
            should not be sent at all, return null from the callback.
            </remarks>
        </member>
        <member name="P:Sentry.SentryOptions.BeforeBreadcrumb">
            <summary>
            A callback invoked when a breadcrumb is about to be stored.
            </summary>
            <remarks>
            Gives a chance to inspect and modify/reject a breadcrumb.
            </remarks>
        </member>
        <member name="P:Sentry.SentryOptions.MaxQueueItems">
            <summary>
            The maximum number of events to keep while the worker attempts to send them.
            </summary>
        </member>
        <member name="P:Sentry.SentryOptions.MaxCacheItems">
            <summary>
            The maximum number of events to keep in cache.
            This option only works if <see cref="P:Sentry.SentryOptions.CacheDirectoryPath"/> is configured as well.
            </summary>
        </member>
        <member name="P:Sentry.SentryOptions.ShutdownTimeout">
            <summary>
            How long to wait for events to be sent before shutdown
            </summary>
            <remarks>
            In case there are events queued when the SDK is closed, upper bound limit to wait
            for the worker to send the events to Sentry.
            </remarks>
            <example>
            The SDK is closed while the queue has 1 event queued.
            The worker takes 50 milliseconds to send an event to Sentry.
            Even though default settings say 2 seconds, closing the SDK would block for 50ms.
            </example>
        </member>
        <member name="P:Sentry.SentryOptions.DecompressionMethods">
            <summary>
            Decompression methods accepted
            </summary>
            <remarks>
            By default accepts all available compression methods supported by the platform
            </remarks>
        </member>
        <member name="P:Sentry.SentryOptions.RequestBodyCompressionLevel">
            <summary>
            The level of which to compress the <see cref="T:Sentry.SentryEvent"/> before sending to Sentry
            </summary>
            <remarks>
            To disable request body compression, use <see cref="F:System.IO.Compression.CompressionLevel.NoCompression"/>
            </remarks>
        </member>
        <member name="P:Sentry.SentryOptions.RequestBodyCompressionBuffered">
            <summary>
            Whether the body compression is buffered and the request 'Content-Length' known in advance.
            </summary>
            <remarks>
            Without reading through the Gzip stream to have its final size, it's no possible to use 'Content-Length'
            header value. That means 'Content-Encoding: chunked' has to be used which is sometimes not supported.
            Sentry on-premise without a reverse-proxy, for example, does not support 'chunked' requests.
            </remarks>
            <see href="https://github.com/getsentry/sentry-dotnet/issues/71"/>
        </member>
        <member name="P:Sentry.SentryOptions.HttpProxy">
            <summary>
            An optional web proxy
            </summary>
        </member>
        <member name="P:Sentry.SentryOptions.CreateHttpClientHandler">
            <summary>
            Creates the inner most <see cref="T:System.Net.Http.HttpClientHandler"/>.
            </summary>
        </member>
        <member name="P:Sentry.SentryOptions.ConfigureClient">
            <summary>
            A callback invoked when a <see cref="T:Sentry.SentryClient"/> is created.
            </summary>
        </member>
        <member name="P:Sentry.SentryOptions.Debug">
            <summary>
            Whether to log diagnostics messages
            </summary>
            <remarks>
            The verbosity can be controlled through <see cref="P:Sentry.SentryOptions.DiagnosticLevel"/>
            and the implementation via <see cref="P:Sentry.SentryOptions.DiagnosticLogger"/>.
            </remarks>
        </member>
        <member name="P:Sentry.SentryOptions.DiagnosticLevel">
            <summary>
            The diagnostics level to be used
            </summary>
            <remarks>
            The <see cref="P:Sentry.SentryOptions.Debug"/> flag has to be switched on for this setting to take effect.
            </remarks>
        </member>
        <member name="P:Sentry.SentryOptions.DiagnosticLogger">
            <summary>
            The implementation of the logger.
            </summary>
            <remarks>
            The <see cref="P:Sentry.SentryOptions.Debug"/> flag has to be switched on for this logger to be used at all.
            When debugging is turned off, this property is made null and any internal logging results in a no-op.
            </remarks>
        </member>
        <member name="P:Sentry.SentryOptions.ReportAssemblies">
            <summary>
            Whether or not to include referenced assemblies in each event sent to sentry. Defaults to <see langword="true"/>.
            </summary>
        </member>
        <member name="P:Sentry.SentryOptions.ReportAssembliesMode">
            <summary>
            What mode to use for reporting referenced assemblies in each event sent to sentry. Defaults to <see cref="F:Sentry.ReportAssembliesMode.Version"/>.
            </summary>
        </member>
        <member name="P:Sentry.SentryOptions.DeduplicateMode">
            <summary>
            What modes to use for event automatic deduplication
            </summary>
            <remarks>
            By default will not drop an event solely for including an inner exception that was already captured.
            </remarks>
        </member>
        <member name="P:Sentry.SentryOptions.CacheDirectoryPath">
            <summary>
            Path to the root directory used for storing events locally for resilience.
            If set to <i>null</i>, caching will not be used.
            </summary>
        </member>
        <member name="P:Sentry.SentryOptions.InitCacheFlushTimeout">
            <summary>
            If set to a positive value, Sentry will attempt to flush existing local event cache when initializing.
            You can set it to <code>TimeSpan.Zero</code> to disable this feature.
            This option only works if <see cref="P:Sentry.SentryOptions.CacheDirectoryPath"/> is configured as well.
            </summary>
            <remarks>
            The trade off here is: Ensure a crash that happens during app start is sent to Sentry
            even though that might slow down the app start. If set to false, the app might crash
            too quickly, before Sentry can capture the cached error in the background.
            </remarks>
        </member>
        <member name="P:Sentry.SentryOptions.DefaultTags">
            <summary>
            Defaults tags to add to all events. (These are indexed by Sentry).
            </summary>
            <remarks>
            If the key already exists in the event, it will not be overwritten by a default tag.
            </remarks>
        </member>
        <member name="P:Sentry.SentryOptions.TracesSampleRate">
            <summary>
            Indicates the percentage of the tracing data that is collected.
            Setting this to <code>0</code> discards all trace data.
            Setting this to <code>1.0</code> collects all trace data.
            Values outside of this range are invalid.
            Default value is <code>0</code>, which means tracing is disabled.
            </summary>
            <remarks>
            Random sampling rate is only applied to transactions that don't already
            have a sampling decision set by other means, such as through <see cref="P:Sentry.SentryOptions.TracesSampler"/>,
            by inheriting it from an incoming trace header, or by copying it from <see cref="T:Sentry.TransactionContext"/>.
            </remarks>
        </member>
        <member name="P:Sentry.SentryOptions.TracesSampler">
            <summary>
            Custom delegate that returns sample rate dynamically for a specific transaction context.
            </summary>
            <remarks>
            Returning <code>null</code> signals that the sampler did not reach a sampling decision.
            In such case, if the transaction already has a sampling decision (for example, if it's
            started from a trace header) that decision is retained.
            Otherwise sampling decision is determined by applying the static sampling rate
            set in <see cref="P:Sentry.SentryOptions.TracesSampleRate"/>.
            </remarks>
        </member>
        <member name="P:Sentry.SentryOptions.StackTraceMode">
            <summary>
            ATTENTION: This option will change how issues are grouped in Sentry!
            </summary>
            <remarks>
            Sentry groups events by stack traces. If you change this mode and you have thousands of groups,
            you'll get thousands of new groups. So use this setting with care.
            </remarks>
        </member>
        <member name="P:Sentry.SentryOptions.MaxAttachmentSize">
            <summary>
            Maximum allowed file size of attachments, in bytes.
            Attachments above this size will be discarded.
            </summary>
            <remarks>
            Regardless of this setting, attachments are also limited to 20mb (compressed) on Relay.
            </remarks>
        </member>
        <member name="P:Sentry.SentryOptions.DetectStartupTime">
            <summary>
            Whether the SDK should attempt to detect the app's and device's startup time.
            </summary>
            <remarks>
            Note that the highest precision value relies on <see cref="M:System.Diagnostics.Process.GetCurrentProcess"/>
            which might not be available. For example on Unity's IL2CPP.
            </remarks>
        </member>
        <member name="P:Sentry.SentryOptions.AutoSessionTrackingInterval">
            <summary>
            Determines the duration of time a session can stay paused before it's considered ended.
            </summary>
            <remarks>
            Note: This interval is only taken into account when integrations support Pause and Resume.
            </remarks>
        </member>
        <member name="P:Sentry.SentryOptions.AutoSessionTracking">
            <summary>
            Whether the SDK should start a session automatically when it's initialized and
            end the session when it's closed.
            </summary>
            <remarks>
            Note: this is disabled by default in the current version, but will become
            enabled by default in the next major version.
            Currently this only works for release health in client mode
            (desktop, mobile applications, but not web servers).
            </remarks>
        </member>
        <member name="P:Sentry.SentryOptions.CrashedLastRun">
            <summary>
            Delegate which is used to check whether the application crashed during last run.
            </summary>
        </member>
        <member name="M:Sentry.SentryOptions.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Sentry.SentryOptions"/>
            </summary>
        </member>
        <member name="T:Sentry.SentryOptionsExtensions">
            <summary>
            SentryOptions extensions.
            </summary>
        </member>
        <member name="M:Sentry.SentryOptionsExtensions.DisableDuplicateEventDetection(Sentry.SentryOptions)">
            <summary>
            Disables the strategy to detect duplicate events.
            </summary>
            <remarks>
            In case a second event is being sent out from the same exception, that event will be discarded.
            It is possible the second event had in fact more data. In which case it'd be ideal to avoid the first
            event going out in the first place.
            </remarks>
            <param name="options">The SentryOptions to remove the processor from.</param>
        </member>
        <member name="M:Sentry.SentryOptionsExtensions.DisableAppDomainUnhandledExceptionCapture(Sentry.SentryOptions)">
            <summary>
            Disables the capture of errors through <see cref="E:System.AppDomain.UnhandledException"/>.
            </summary>
            <param name="options">The SentryOptions to remove the integration from.</param>
        </member>
        <member name="M:Sentry.SentryOptionsExtensions.DisableTaskUnobservedTaskExceptionCapture(Sentry.SentryOptions)">
            <summary>
            Disables the capture of errors through <see cref="E:System.Threading.Tasks.TaskScheduler.UnobservedTaskException"/>.
            </summary>
            <param name="options">The SentryOptions to remove the integration from.</param>
        </member>
        <member name="M:Sentry.SentryOptionsExtensions.DisableAppDomainProcessExitFlush(Sentry.SentryOptions)">
            <summary>
            Disables the capture of errors through <see cref="E:System.AppDomain.ProcessExit"/>
            </summary>
            <param name="options">The SentryOptions to remove the integration from.</param>
        </member>
        <member name="M:Sentry.SentryOptionsExtensions.AddIntegration(Sentry.SentryOptions,Sentry.Integrations.ISdkIntegration)">
            <summary>
            Add an integration
            </summary>
            <param name="options">The SentryOptions to hold the processor.</param>
            <param name="integration">The integration.</param>
        </member>
        <member name="M:Sentry.SentryOptionsExtensions.RemoveIntegration``1(Sentry.SentryOptions)">
            <summary>
            Removes all integrations of type <typeparamref name="TIntegration"/>.
            </summary>
            <typeparam name="TIntegration">The type of the integration(s) to remove.</typeparam>
            <param name="options">The SentryOptions to remove the integration(s) from.</param>
            <returns></returns>
        </member>
        <member name="M:Sentry.SentryOptionsExtensions.AddExceptionFilter(Sentry.SentryOptions,Sentry.Extensibility.IExceptionFilter)">
            <summary>
            Add an exception filter.
            </summary>
            <param name="options">The SentryOptions to hold the processor.</param>
            <param name="exceptionFilter">The exception filter to add.</param>
        </member>
        <member name="M:Sentry.SentryOptionsExtensions.AddExceptionFilterForType``1(Sentry.SentryOptions)">
            <summary>
            Ignore exception of type <typeparamref name="TException"/> or derived.
            </summary>
            <typeparam name="TException">The type of the exception to ignore.</typeparam>
            <param name="options">The SentryOptions to store the exceptions type ignore.</param>
        </member>
        <member name="M:Sentry.SentryOptionsExtensions.AddInAppExclude(Sentry.SentryOptions,System.String)">
            <summary>
            Add prefix to exclude from 'InApp' stack trace list.
            </summary>
        </member>
        <member name="M:Sentry.SentryOptionsExtensions.AddInAppInclude(Sentry.SentryOptions,System.String)">
            <summary>
            Add prefix to include as in 'InApp' stack trace.
            </summary>
        </member>
        <member name="M:Sentry.SentryOptionsExtensions.AddExceptionProcessor(Sentry.SentryOptions,Sentry.Extensibility.ISentryEventExceptionProcessor)">
            <summary>
            Add an exception processor.
            </summary>
            <param name="options">The SentryOptions to hold the processor.</param>
            <param name="processor">The exception processor.</param>
        </member>
        <member name="M:Sentry.SentryOptionsExtensions.AddExceptionProcessors(Sentry.SentryOptions,System.Collections.Generic.IEnumerable{Sentry.Extensibility.ISentryEventExceptionProcessor})">
            <summary>
            Add the exception processors.
            </summary>
            <param name="options">The SentryOptions to hold the processor.</param>
            <param name="processors">The exception processors.</param>
        </member>
        <member name="M:Sentry.SentryOptionsExtensions.AddEventProcessor(Sentry.SentryOptions,Sentry.Extensibility.ISentryEventProcessor)">
            <summary>
            Adds an event processor which is invoked when creating a <see cref="T:Sentry.SentryEvent"/>.
            </summary>
            <param name="options">The SentryOptions to hold the processor.</param>
            <param name="processor">The event processor.</param>
        </member>
        <member name="M:Sentry.SentryOptionsExtensions.AddEventProcessors(Sentry.SentryOptions,System.Collections.Generic.IEnumerable{Sentry.Extensibility.ISentryEventProcessor})">
            <summary>
            Adds event processors which are invoked when creating a <see cref="T:Sentry.SentryEvent"/>.
            </summary>
            <param name="options">The SentryOptions to hold the processor.</param>
            <param name="processors">The event processors.</param>
        </member>
        <member name="M:Sentry.SentryOptionsExtensions.AddEventProcessorProvider(Sentry.SentryOptions,System.Func{System.Collections.Generic.IEnumerable{Sentry.Extensibility.ISentryEventProcessor}})">
            <summary>
            Adds an event processor provider which is invoked when creating a <see cref="T:Sentry.SentryEvent"/>.
            </summary>
            <param name="options">The SentryOptions to hold the processor provider.</param>
            <param name="processorProvider">The event processor provider.</param>
        </member>
        <member name="M:Sentry.SentryOptionsExtensions.AddExceptionProcessorProvider(Sentry.SentryOptions,System.Func{System.Collections.Generic.IEnumerable{Sentry.Extensibility.ISentryEventExceptionProcessor}})">
            <summary>
            Add the exception processor provider.
            </summary>
            <param name="options">The SentryOptions to hold the processor provider.</param>
            <param name="processorProvider">The exception processor provider.</param>
        </member>
        <member name="M:Sentry.SentryOptionsExtensions.GetAllEventProcessors(Sentry.SentryOptions)">
            <summary>
            Invokes all event processor providers available.
            </summary>
            <param name="options">The SentryOptions which holds the processor providers.</param>
        </member>
        <member name="M:Sentry.SentryOptionsExtensions.GetAllExceptionProcessors(Sentry.SentryOptions)">
            <summary>
            Invokes all exception processor providers available.
            </summary>
            <param name="options">The SentryOptions which holds the processor providers.</param>
        </member>
        <member name="M:Sentry.SentryOptionsExtensions.UseStackTraceFactory(Sentry.SentryOptions,Sentry.Extensibility.ISentryStackTraceFactory)">
            <summary>
            Use custom <see cref="T:Sentry.Extensibility.ISentryStackTraceFactory" />.
            </summary>
            <param name="options">The SentryOptions to hold the processor provider.</param>
            <param name="sentryStackTraceFactory">The stack trace factory.</param>
        </member>
        <member name="M:Sentry.SentryOptionsExtensions.ApplyDefaultTags(Sentry.SentryOptions,Sentry.IHasTags)">
            <summary>
            Applies the default tags to an event without resetting existing tags.
            </summary>
            <param name="options">The options to read the default tags from.</param>
            <param name="hasTags">The event to apply the tags to.</param>
        </member>
        <member name="T:Sentry.SentrySdk">
            <summary>
            Sentry SDK entrypoint.
            </summary>
            <remarks>
            This is a facade to the SDK instance.
            It allows safe static access to a client and scope management.
            When the SDK is uninitialized, calls to this class result in no-op so no callbacks are invoked.
            </remarks>
        </member>
        <member name="P:Sentry.SentrySdk.LastEventId">
            <summary>
            Last event id recorded in the current scope.
            </summary>
        </member>
        <member name="M:Sentry.SentrySdk.Init">
            <summary>
            Initializes the SDK while attempting to locate the DSN.
            </summary>
            <remarks>
            If the DSN is not found, the SDK will not change state.
            </remarks>
        </member>
        <member name="M:Sentry.SentrySdk.Init(System.String)">
            <summary>
            Initializes the SDK with the specified DSN.
            </summary>
            <remarks>
            An empty string is interpreted as a disabled SDK.
            </remarks>
            <seealso href="https://develop.sentry.dev/sdk/overview/#usage-for-end-users"/>
            <param name="dsn">The dsn.</param>
        </member>
        <member name="M:Sentry.SentrySdk.Init(System.Action{Sentry.SentryOptions})">
            <summary>
            Initializes the SDK with an optional configuration options callback.
            </summary>
            <param name="configureOptions">The configure options.</param>
        </member>
        <member name="M:Sentry.SentrySdk.Init(Sentry.SentryOptions)">
            <summary>
            Initializes the SDK with the specified options instance.
            </summary>
            <param name="options">The options instance</param>
            <remarks>
            Used by integrations which have their own delegates.
            </remarks>
            <returns>A disposable to close the SDK.</returns>
        </member>
        <member name="M:Sentry.SentrySdk.FlushAsync(System.TimeSpan)">
            <summary>
            Flushes events queued up.
            </summary>
        </member>
        <member name="M:Sentry.SentrySdk.Close">
            <summary>
            Close the SDK.
            </summary>
            <remarks>
            Flushes the events and disables the SDK.
            This method is mostly used for testing the library since
            Init returns a IDisposable that can be used to shutdown the SDK.
            </remarks>
        </member>
        <member name="P:Sentry.SentrySdk.IsEnabled">
            <summary>
            Whether the SDK is enabled or not.
            </summary>
        </member>
        <member name="M:Sentry.SentrySdk.PushScope``1(``0)">
            <summary>
            Creates a new scope that will terminate when disposed.
            </summary>
            <remarks>
            Pushes a new scope while inheriting the current scope's data.
            </remarks>
            <param name="state">A state object to be added to the scope.</param>
            <returns>A disposable that when disposed, ends the created scope.</returns>
        </member>
        <member name="M:Sentry.SentrySdk.PushScope">
            <summary>
            Creates a new scope that will terminate when disposed.
            </summary>
            <returns>A disposable that when disposed, ends the created scope.</returns>
        </member>
        <member name="M:Sentry.SentrySdk.BindClient(Sentry.ISentryClient)">
            <summary>
            Binds the client to the current scope.
            </summary>
            <param name="client">The client.</param>
        </member>
        <member name="M:Sentry.SentrySdk.AddBreadcrumb(System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String},Sentry.BreadcrumbLevel)">
            <summary>
            Adds a breadcrumb to the current Scope.
            </summary>
            <param name="message">
            If a message is provided it’s rendered as text and the whitespace is preserved.
            Very long text might be abbreviated in the UI.</param>
            <param name="category">
            Categories are dotted strings that indicate what the crumb is or where it comes from.
            Typically it’s a module name or a descriptive string.
            For instance ui.click could be used to indicate that a click happened in the UI or flask could be used to indicate that the event originated in the Flask framework.
            </param>
            <param name="type">
            The type of breadcrumb.
            The default type is default which indicates no specific handling.
            Other types are currently http for HTTP requests and navigation for navigation events.
            <seealso href="https://develop.sentry.dev/sdk/event-payloads/breadcrumbs/#breadcrumb-types"/>
            </param>
            <param name="data">
            Data associated with this breadcrumb.
            Contains a sub-object whose contents depend on the breadcrumb type.
            Additional parameters that are unsupported by the type are rendered as a key/value table.
            </param>
            <param name="level">Breadcrumb level.</param>
            <seealso href="https://develop.sentry.dev/sdk/event-payloads/breadcrumbs/"/>
        </member>
        <member name="M:Sentry.SentrySdk.AddBreadcrumb(Sentry.Infrastructure.ISystemClock,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String},Sentry.BreadcrumbLevel)">
            <summary>
            Adds a breadcrumb to the current scope.
            </summary>
            <remarks>
            This overload is intended to be used by integrations only.
            The objective is to allow better testability by allowing control of the timestamp set to the breadcrumb.
            </remarks>
            <param name="clock">An optional <see cref="T:Sentry.Infrastructure.ISystemClock"/>.</param>
            <param name="message">The message.</param>
            <param name="category">The category.</param>
            <param name="type">The type.</param>
            <param name="data">The data.</param>
            <param name="level">The level.</param>
        </member>
        <member name="M:Sentry.SentrySdk.WithScope(System.Action{Sentry.Scope})">
            <summary>
            Runs the callback with a new scope which gets dropped at the end.
            </summary>
            <remarks>
            Pushes a new scope, runs the callback, pops the scope.
            </remarks>
            <see href="https://docs.sentry.io/platforms/dotnet/enriching-events/scopes/#local-scopes"/>
            <param name="scopeCallback">The callback to run with the one time scope.</param>
        </member>
        <member name="M:Sentry.SentrySdk.ConfigureScope(System.Action{Sentry.Scope})">
            <summary>
            Configures the scope through the callback.
            </summary>
            <param name="configureScope">The configure scope callback.</param>
        </member>
        <member name="M:Sentry.SentrySdk.ConfigureScopeAsync(System.Func{Sentry.Scope,System.Threading.Tasks.Task})">
            <summary>
            Configures the scope asynchronously.
            </summary>
            <param name="configureScope">The configure scope callback.</param>
            <returns>The Id of the event.</returns>
        </member>
        <member name="M:Sentry.SentrySdk.CaptureEvent(Sentry.SentryEvent)">
            <summary>
            Captures the event.
            </summary>
            <param name="evt">The event.</param>
            <returns>The Id of the event.</returns>
        </member>
        <member name="M:Sentry.SentrySdk.CaptureEvent(Sentry.SentryEvent,Sentry.Scope)">
            <summary>
            Captures the event using the specified scope.
            </summary>
            <param name="evt">The event.</param>
            <param name="scope">The scope.</param>
            <returns>The Id of the event.</returns>
        </member>
        <member name="M:Sentry.SentrySdk.CaptureException(System.Exception)">
            <summary>
            Captures the exception.
            </summary>
            <param name="exception">The exception.</param>
            <returns>The Id of the even.t</returns>
        </member>
        <member name="M:Sentry.SentrySdk.CaptureMessage(System.String,Sentry.SentryLevel)">
            <summary>
            Captures the message.
            </summary>
            <param name="message">The message to send.</param>
            <param name="level">The message level.</param>
            <returns>The Id of the event.</returns>
        </member>
        <member name="M:Sentry.SentrySdk.CaptureUserFeedback(Sentry.UserFeedback)">
            <summary>
            Captures a user feedback.
            </summary>
            <param name="userFeedback">The user feedback to send to Sentry.</param>
        </member>
        <member name="M:Sentry.SentrySdk.CaptureUserFeedback(Sentry.SentryId,System.String,System.String,System.String)">
            <summary>
            Captures a user feedback.
            </summary>
            <param name="eventId">The event Id.</param>
            <param name="email">The user email.</param>
            <param name="comments">The user comments.</param>
            <param name="name">The optional username.</param>
        </member>
        <member name="M:Sentry.SentrySdk.CaptureTransaction(Sentry.Transaction)">
            <summary>
            Captures a transaction.
            </summary>
        </member>
        <member name="M:Sentry.SentrySdk.CaptureSession(Sentry.SessionUpdate)">
            <summary>
            Captures a session update.
            </summary>
        </member>
        <member name="M:Sentry.SentrySdk.StartTransaction(Sentry.ITransactionContext,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Starts a transaction.
            </summary>
        </member>
        <member name="M:Sentry.SentrySdk.StartTransaction(Sentry.ITransactionContext)">
            <summary>
            Starts a transaction.
            </summary>
        </member>
        <member name="M:Sentry.SentrySdk.StartTransaction(System.String,System.String)">
            <summary>
            Starts a transaction.
            </summary>
        </member>
        <member name="M:Sentry.SentrySdk.StartTransaction(System.String,System.String,System.String)">
            <summary>
            Starts a transaction.
            </summary>
        </member>
        <member name="M:Sentry.SentrySdk.StartTransaction(System.String,System.String,Sentry.SentryTraceHeader)">
            <summary>
            Starts a transaction.
            </summary>
        </member>
        <member name="M:Sentry.SentrySdk.BindException(System.Exception,Sentry.ISpan)">
            <summary>
            Binds specified exception the specified span.
            </summary>
            <remarks>
            This method is used internally and is not meant for public use.
            </remarks>
        </member>
        <member name="M:Sentry.SentrySdk.GetSpan">
            <summary>
            Gets the last active span.
            </summary>
        </member>
        <member name="M:Sentry.SentrySdk.GetTraceHeader">
            <summary>
            Gets the Sentry trace header.
            </summary>
        </member>
        <member name="M:Sentry.SentrySdk.StartSession">
            <inheritdoc cref="M:Sentry.IHub.StartSession"/>
        </member>
        <member name="M:Sentry.SentrySdk.EndSession(Sentry.SessionEndStatus)">
            <inheritdoc cref="M:Sentry.IHub.EndSession(Sentry.SessionEndStatus)"/>
        </member>
        <member name="M:Sentry.SentrySdk.PauseSession">
            <inheritdoc cref="M:Sentry.IHub.PauseSession"/>
        </member>
        <member name="M:Sentry.SentrySdk.ResumeSession">
            <inheritdoc cref="M:Sentry.IHub.ResumeSession"/>
        </member>
        <member name="T:Sentry.SentryThread">
            <summary>
            A thread running at the time of an event.
            </summary>
            <see href="https://develop.sentry.dev/sdk/event-payloads/threads/"/>
        </member>
        <member name="P:Sentry.SentryThread.Id">
            <summary>
            The Id of the thread.
            </summary>
        </member>
        <member name="P:Sentry.SentryThread.Name">
            <summary>
            The name of the thread.
            </summary>
        </member>
        <member name="P:Sentry.SentryThread.Crashed">
            <summary>
            Whether the crash happened on this thread.
            </summary>
        </member>
        <member name="P:Sentry.SentryThread.Current">
            <summary>
            An optional flag to indicate that the thread was in the foreground.
            </summary>
        </member>
        <member name="P:Sentry.SentryThread.Stacktrace">
            <summary>
            Stack trace.
            </summary>
            <see href="https://develop.sentry.dev/sdk/event-payloads/stacktrace/"/>
        </member>
        <member name="M:Sentry.SentryThread.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc />
        </member>
        <member name="M:Sentry.SentryThread.FromJson(System.Text.Json.JsonElement)">
            <summary>
            Parses from JSON.
            </summary>
        </member>
        <member name="T:Sentry.SentryTraceHeader">
            <summary>
            Sentry trace header.
            </summary>
        </member>
        <member name="P:Sentry.SentryTraceHeader.TraceId">
            <summary>
            Trace ID.
            </summary>
        </member>
        <member name="P:Sentry.SentryTraceHeader.SpanId">
            <summary>
            Span ID.
            </summary>
        </member>
        <member name="P:Sentry.SentryTraceHeader.IsSampled">
            <summary>
            Whether the trace is sampled.
            </summary>
        </member>
        <member name="M:Sentry.SentryTraceHeader.#ctor(Sentry.SentryId,Sentry.SpanId,System.Nullable{System.Boolean})">
            <summary>
            Initializes an instance of <see cref="T:Sentry.SentryTraceHeader"/>.
            </summary>
        </member>
        <member name="M:Sentry.SentryTraceHeader.ToString">
            <inheritdoc />
        </member>
        <member name="M:Sentry.SentryTraceHeader.Parse(System.String)">
            <summary>
            Parses <see cref="T:Sentry.SentryTraceHeader"/> from string.
            </summary>
        </member>
        <member name="T:Sentry.SentryValues`1">
            <summary>
            Helps serialization of Sentry protocol types which include a values property.
            </summary>
        </member>
        <member name="P:Sentry.SentryValues`1.Values">
            <summary>
            The values.
            </summary>
        </member>
        <member name="M:Sentry.SentryValues`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates an instance from the specified <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="M:Sentry.SentryValues`1.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc />
        </member>
        <member name="T:Sentry.Session">
            <summary>
            Sentry session.
            </summary>
        </member>
        <member name="P:Sentry.Session.Id">
            <inheritdoc />
        </member>
        <member name="P:Sentry.Session.DistinctId">
            <inheritdoc />
        </member>
        <member name="P:Sentry.Session.StartTimestamp">
            <inheritdoc />
        </member>
        <member name="P:Sentry.Session.Release">
            <inheritdoc />
        </member>
        <member name="P:Sentry.Session.Environment">
            <inheritdoc />
        </member>
        <member name="P:Sentry.Session.IpAddress">
            <inheritdoc />
        </member>
        <member name="P:Sentry.Session.UserAgent">
            <inheritdoc />
        </member>
        <member name="P:Sentry.Session.ErrorCount">
            <inheritdoc />
        </member>
        <member name="M:Sentry.Session.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Sentry.Session"/>.
            </summary>
        </member>
        <member name="M:Sentry.Session.ReportError">
            <summary>
            Reports an error on the session.
            </summary>
        </member>
        <member name="T:Sentry.SessionEndStatus">
            <summary>
            Terminal state of a session.
            </summary>
        </member>
        <member name="F:Sentry.SessionEndStatus.Exited">
            <summary>
            Session ended normally.
            </summary>
        </member>
        <member name="F:Sentry.SessionEndStatus.Crashed">
            <summary>
            Session ended with an unhandled exception.
            </summary>
        </member>
        <member name="F:Sentry.SessionEndStatus.Abnormal">
            <summary>
            Session ended abnormally (e.g. device lost power).
            </summary>
        </member>
        <member name="T:Sentry.SessionUpdate">
            <summary>
            Session update.
            </summary>
        </member>
        <member name="P:Sentry.SessionUpdate.Id">
            <inheritdoc />
        </member>
        <member name="P:Sentry.SessionUpdate.DistinctId">
            <inheritdoc />
        </member>
        <member name="P:Sentry.SessionUpdate.StartTimestamp">
            <inheritdoc />
        </member>
        <member name="P:Sentry.SessionUpdate.Release">
            <inheritdoc />
        </member>
        <member name="P:Sentry.SessionUpdate.Environment">
            <inheritdoc />
        </member>
        <member name="P:Sentry.SessionUpdate.IpAddress">
            <inheritdoc />
        </member>
        <member name="P:Sentry.SessionUpdate.UserAgent">
            <inheritdoc />
        </member>
        <member name="P:Sentry.SessionUpdate.ErrorCount">
            <inheritdoc />
        </member>
        <member name="P:Sentry.SessionUpdate.IsInitial">
            <summary>
            Whether this is the initial update.
            </summary>
        </member>
        <member name="P:Sentry.SessionUpdate.Timestamp">
            <summary>
            Timestamp.
            </summary>
        </member>
        <member name="P:Sentry.SessionUpdate.SequenceNumber">
            <summary>
            Sequence number.
            </summary>
        </member>
        <member name="P:Sentry.SessionUpdate.Duration">
            <summary>
            Duration of time since the start of the session.
            </summary>
        </member>
        <member name="P:Sentry.SessionUpdate.EndStatus">
            <summary>
            Status with which the session was ended.
            </summary>
        </member>
        <member name="M:Sentry.SessionUpdate.#ctor(Sentry.SentryId,System.String,System.DateTimeOffset,System.String,System.String,System.String,System.String,System.Int32,System.Boolean,System.DateTimeOffset,System.Int32,System.Nullable{Sentry.SessionEndStatus})">
            <summary>
            Initializes a new instance of <see cref="T:Sentry.SessionUpdate"/>.
            </summary>
        </member>
        <member name="M:Sentry.SessionUpdate.#ctor(Sentry.ISession,System.Boolean,System.DateTimeOffset,System.Int32,System.Nullable{Sentry.SessionEndStatus})">
            <summary>
            Initializes a new instance of <see cref="T:Sentry.SessionUpdate"/>.
            </summary>
        </member>
        <member name="M:Sentry.SessionUpdate.#ctor(Sentry.SessionUpdate,System.Boolean,System.Nullable{Sentry.SessionEndStatus})">
            <summary>
            Initializes a new instance of <see cref="T:Sentry.SessionUpdate"/>.
            </summary>
        </member>
        <member name="M:Sentry.SessionUpdate.#ctor(Sentry.SessionUpdate,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Sentry.SessionUpdate"/>.
            </summary>
        </member>
        <member name="M:Sentry.SessionUpdate.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc />
        </member>
        <member name="M:Sentry.SessionUpdate.FromJson(System.Text.Json.JsonElement)">
            <summary>
            Parses <see cref="T:Sentry.SessionUpdate"/> from JSON.
            </summary>
        </member>
        <member name="T:Sentry.Span">
            <summary>
            Transaction span.
            </summary>
        </member>
        <member name="P:Sentry.Span.SpanId">
            <inheritdoc />
        </member>
        <member name="P:Sentry.Span.ParentSpanId">
            <inheritdoc />
        </member>
        <member name="P:Sentry.Span.TraceId">
            <inheritdoc />
        </member>
        <member name="P:Sentry.Span.StartTimestamp">
            <inheritdoc />
        </member>
        <member name="P:Sentry.Span.EndTimestamp">
            <inheritdoc />
        </member>
        <member name="P:Sentry.Span.IsFinished">
            <inheritdoc />
        </member>
        <member name="P:Sentry.Span.Operation">
            <inheritdoc />
        </member>
        <member name="P:Sentry.Span.Description">
            <inheritdoc />
        </member>
        <member name="P:Sentry.Span.Status">
            <inheritdoc />
        </member>
        <member name="P:Sentry.Span.IsSampled">
            <inheritdoc />
        </member>
        <member name="P:Sentry.Span.Tags">
            <inheritdoc />
        </member>
        <member name="M:Sentry.Span.SetTag(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Sentry.Span.UnsetTag(System.String)">
            <inheritdoc />
        </member>
        <member name="P:Sentry.Span.Extra">
            <inheritdoc />
        </member>
        <member name="M:Sentry.Span.SetExtra(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Sentry.Span.#ctor(System.Nullable{Sentry.SpanId},System.String)">
            <summary>
            Initializes an instance of <see cref="T:Sentry.SpanTracer"/>.
            </summary>
        </member>
        <member name="M:Sentry.Span.#ctor(Sentry.ISpan)">
            <summary>
            Initializes an instance of <see cref="T:Sentry.SpanTracer"/>.
            </summary>
        </member>
        <member name="M:Sentry.Span.GetTraceHeader">
            <inheritdoc />
        </member>
        <member name="M:Sentry.Span.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc />
        </member>
        <member name="M:Sentry.Span.FromJson(System.Text.Json.JsonElement)">
            <summary>
            Parses a span from JSON.
            </summary>
        </member>
        <member name="T:Sentry.SpanContext">
            <summary>
            Span metadata used for sampling.
            </summary>
        </member>
        <member name="P:Sentry.SpanContext.SpanId">
            <inheritdoc />
        </member>
        <member name="P:Sentry.SpanContext.ParentSpanId">
            <inheritdoc />
        </member>
        <member name="P:Sentry.SpanContext.TraceId">
            <inheritdoc />
        </member>
        <member name="P:Sentry.SpanContext.Operation">
            <inheritdoc />
        </member>
        <member name="P:Sentry.SpanContext.Description">
            <inheritdoc />
        </member>
        <member name="P:Sentry.SpanContext.Status">
            <inheritdoc />
        </member>
        <member name="P:Sentry.SpanContext.IsSampled">
            <inheritdoc />
        </member>
        <member name="M:Sentry.SpanContext.#ctor(Sentry.SpanId,System.Nullable{Sentry.SpanId},Sentry.SentryId,System.String,System.String,System.Nullable{Sentry.SpanStatus},System.Nullable{System.Boolean})">
            <summary>
            Initializes an instance of <see cref="T:Sentry.SpanContext"/>.
            </summary>
        </member>
        <member name="T:Sentry.SpanId">
            <summary>
            Sentry span ID.
            </summary>
        </member>
        <member name="F:Sentry.SpanId.Empty">
            <summary>
            An empty Sentry span ID.
            </summary>
        </member>
        <member name="M:Sentry.SpanId.#ctor(System.String)">
            <summary>
            Creates a new instance of a Sentry span Id.
            </summary>
        </member>
        <member name="M:Sentry.SpanId.Equals(Sentry.SpanId)">
            <inheritdoc />
        </member>
        <member name="M:Sentry.SpanId.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Sentry.SpanId.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Sentry.SpanId.ToString">
            <inheritdoc />
        </member>
        <member name="M:Sentry.SpanId.Create">
            <summary>
            Generates a new Sentry ID.
            </summary>
        </member>
        <member name="M:Sentry.SpanId.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc />
        </member>
        <member name="M:Sentry.SpanId.Parse(System.String)">
            <summary>
            Parses from string.
            </summary>
        </member>
        <member name="M:Sentry.SpanId.FromJson(System.Text.Json.JsonElement)">
            <summary>
            Parses from JSON.
            </summary>
        </member>
        <member name="M:Sentry.SpanId.op_Equality(Sentry.SpanId,Sentry.SpanId)">
            <summary>
            Equality operator.
            </summary>
        </member>
        <member name="M:Sentry.SpanId.op_Inequality(Sentry.SpanId,Sentry.SpanId)">
            <summary>
            Equality operator.
            </summary>
        </member>
        <member name="M:Sentry.SpanId.op_Implicit(Sentry.SpanId)~System.String">
            <summary>
            The <see cref="T:System.Guid"/> from the <see cref="T:Sentry.SentryId"/>.
            </summary>
        </member>
        <member name="T:Sentry.SpanStatus">
            <summary>
            Span status.
            </summary>
        </member>
        <member name="F:Sentry.SpanStatus.Ok">
            <summary>The operation completed successfully.</summary>
        </member>
        <member name="F:Sentry.SpanStatus.DeadlineExceeded">
            <summary>Deadline expired before operation could complete.</summary>
        </member>
        <member name="F:Sentry.SpanStatus.Unauthenticated">
            <summary>401 Unauthorized (actually does mean unauthenticated according to RFC 7235).</summary>
        </member>
        <member name="F:Sentry.SpanStatus.PermissionDenied">
            <summary>403 Forbidden</summary>
        </member>
        <member name="F:Sentry.SpanStatus.NotFound">
            <summary>404 Not Found. Some requested entity (file or directory) was not found.</summary>
        </member>
        <member name="F:Sentry.SpanStatus.ResourceExhausted">
            <summary>429 Too Many Requests</summary>
        </member>
        <member name="F:Sentry.SpanStatus.InvalidArgument">
            <summary>Client specified an invalid argument. 4xx.</summary>
        </member>
        <member name="F:Sentry.SpanStatus.Unimplemented">
            <summary>501 Not Implemented</summary>
        </member>
        <member name="F:Sentry.SpanStatus.Unavailable">
            <summary>503 Service Unavailable</summary>
        </member>
        <member name="F:Sentry.SpanStatus.InternalError">
            <summary>Other/generic 5xx.</summary>
        </member>
        <member name="F:Sentry.SpanStatus.UnknownError">
            <summary>Unknown. Any non-standard HTTP status code.</summary>
        </member>
        <member name="F:Sentry.SpanStatus.Cancelled">
            <summary>The operation was cancelled (typically by the user).</summary>
        </member>
        <member name="F:Sentry.SpanStatus.AlreadyExists">
            <summary>Already exists (409).</summary>
        </member>
        <member name="F:Sentry.SpanStatus.FailedPrecondition">
            <summary>Operation was rejected because the system is not in a state required for the operation.</summary>
        </member>
        <member name="F:Sentry.SpanStatus.Aborted">
            <summary>The operation was aborted, typically due to a concurrency issue.</summary>
        </member>
        <member name="F:Sentry.SpanStatus.OutOfRange">
            <summary>Operation was attempted past the valid range.</summary>
        </member>
        <member name="F:Sentry.SpanStatus.DataLoss">
            <summary>Unrecoverable data loss or corruption</summary>
        </member>
        <member name="T:Sentry.SpanTracer">
            <summary>
            Transaction span tracer.
            </summary>
        </member>
        <member name="P:Sentry.SpanTracer.SpanId">
            <inheritdoc />
        </member>
        <member name="P:Sentry.SpanTracer.ParentSpanId">
            <inheritdoc />
        </member>
        <member name="P:Sentry.SpanTracer.TraceId">
            <inheritdoc />
        </member>
        <member name="P:Sentry.SpanTracer.StartTimestamp">
            <inheritdoc />
        </member>
        <member name="P:Sentry.SpanTracer.EndTimestamp">
            <inheritdoc />
        </member>
        <member name="P:Sentry.SpanTracer.IsFinished">
            <inheritdoc />
        </member>
        <member name="P:Sentry.SpanTracer.Operation">
            <inheritdoc cref="P:Sentry.ISpan.Operation" />
        </member>
        <member name="P:Sentry.SpanTracer.Description">
            <inheritdoc cref="P:Sentry.ISpan.Description" />
        </member>
        <member name="P:Sentry.SpanTracer.Status">
            <inheritdoc cref="P:Sentry.ISpan.Status" />
        </member>
        <member name="P:Sentry.SpanTracer.IsSampled">
            <inheritdoc />
        </member>
        <member name="P:Sentry.SpanTracer.Tags">
            <inheritdoc />
        </member>
        <member name="M:Sentry.SpanTracer.SetTag(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Sentry.SpanTracer.UnsetTag(System.String)">
            <inheritdoc />
        </member>
        <member name="P:Sentry.SpanTracer.Extra">
            <inheritdoc />
        </member>
        <member name="M:Sentry.SpanTracer.SetExtra(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Sentry.SpanTracer.#ctor(Sentry.IHub,Sentry.TransactionTracer,System.Nullable{Sentry.SpanId},Sentry.SentryId,System.String)">
            <summary>
            Initializes an instance of <see cref="T:Sentry.SpanTracer"/>.
            </summary>
        </member>
        <member name="M:Sentry.SpanTracer.StartChild(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Sentry.SpanTracer.Finish">
            <inheritdoc />
        </member>
        <member name="M:Sentry.SpanTracer.Finish(Sentry.SpanStatus)">
            <inheritdoc />
        </member>
        <member name="M:Sentry.SpanTracer.Finish(System.Exception,Sentry.SpanStatus)">
            <inheritdoc />
        </member>
        <member name="M:Sentry.SpanTracer.Finish(System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:Sentry.SpanTracer.GetTraceHeader">
            <inheritdoc />
        </member>
        <member name="T:Sentry.StackTraceMode">
            <summary>
            The mode which the SDK builds the stack trace.
            </summary>
            <remarks>
            Changing this WILL affect issue grouping in Sentry since the format of the frames will change.
            </remarks>
        </member>
        <member name="F:Sentry.StackTraceMode.Original">
            <summary>
            The default .NET stack trace format.
            </summary>
            <remarks>
            This was the default before Sentry .NET 3.0.0.
            </remarks>
        </member>
        <member name="F:Sentry.StackTraceMode.Enhanced">
            <summary>
            Includes return type, arguments ref modifiers and more.
            </summary>
            <remarks>
            This mode uses <see href="https://github.com/getsentry/Ben.Demystifier">Ben Adams' Demystifier library</see>.
            </remarks>
        </member>
        <member name="T:Sentry.StartupTimeDetectionMode">
            <summary>
            The mode of which to attempt to detect the process startup time.
            </summary>
        </member>
        <member name="F:Sentry.StartupTimeDetectionMode.None">
            <summary>
            Disabled.
            </summary>
        </member>
        <member name="F:Sentry.StartupTimeDetectionMode.Fast">
            <summary>
            Best effort approach that can be off by a few seconds or minutes.
            </summary>
            <remarks>
            In this mode, the App startup time is assumed to be the point of which the SDK was initialized.
            </remarks>
        </member>
        <member name="F:Sentry.StartupTimeDetectionMode.Best">
            <summary>
            Attempts to detect the startup time with the most precision.
            </summary>
            <remarks>
            This can require starting work on the thread pool due to P/Invoke calls.
            </remarks>
        </member>
        <member name="T:Sentry.StreamAttachmentContent">
            <summary>
            Attachment sourced from stream.
            </summary>
        </member>
        <member name="M:Sentry.StreamAttachmentContent.#ctor(System.IO.Stream)">
            <summary>
            Creates a new instance of <see cref="T:Sentry.StreamAttachmentContent"/>.
            </summary>
        </member>
        <member name="M:Sentry.StreamAttachmentContent.GetStream">
            <inheritdoc />
        </member>
        <member name="T:Sentry.Transaction">
            <summary>
            Sentry performance transaction.
            </summary>
        </member>
        <member name="P:Sentry.Transaction.EventId">
            <summary>
            Transaction's event ID.
            </summary>
        </member>
        <member name="P:Sentry.Transaction.SpanId">
            <inheritdoc />
        </member>
        <member name="P:Sentry.Transaction.ParentSpanId">
            <inheritdoc />
        </member>
        <member name="P:Sentry.Transaction.TraceId">
            <inheritdoc />
        </member>
        <member name="P:Sentry.Transaction.Name">
            <inheritdoc />
        </member>
        <member name="P:Sentry.Transaction.IsParentSampled">
            <inheritdoc />
        </member>
        <member name="P:Sentry.Transaction.Platform">
            <inheritdoc />
        </member>
        <member name="P:Sentry.Transaction.Release">
            <inheritdoc />
        </member>
        <member name="P:Sentry.Transaction.StartTimestamp">
            <inheritdoc />
        </member>
        <member name="P:Sentry.Transaction.EndTimestamp">
            <inheritdoc />
        </member>
        <member name="P:Sentry.Transaction.Operation">
            <inheritdoc />
        </member>
        <member name="P:Sentry.Transaction.Description">
            <inheritdoc />
        </member>
        <member name="P:Sentry.Transaction.Status">
            <inheritdoc />
        </member>
        <member name="P:Sentry.Transaction.IsSampled">
            <inheritdoc />
        </member>
        <member name="P:Sentry.Transaction.Level">
            <inheritdoc />
        </member>
        <member name="P:Sentry.Transaction.Request">
            <inheritdoc />
        </member>
        <member name="P:Sentry.Transaction.Contexts">
            <inheritdoc />
        </member>
        <member name="P:Sentry.Transaction.User">
            <inheritdoc />
        </member>
        <member name="P:Sentry.Transaction.Environment">
            <inheritdoc />
        </member>
        <member name="P:Sentry.Transaction.Sdk">
            <inheritdoc />
        </member>
        <member name="P:Sentry.Transaction.Fingerprint">
            <inheritdoc />
        </member>
        <member name="P:Sentry.Transaction.Breadcrumbs">
            <inheritdoc />
        </member>
        <member name="P:Sentry.Transaction.Extra">
            <inheritdoc />
        </member>
        <member name="P:Sentry.Transaction.Tags">
            <inheritdoc />
        </member>
        <member name="P:Sentry.Transaction.Spans">
            <summary>
            Flat list of spans within this transaction.
            </summary>
        </member>
        <member name="P:Sentry.Transaction.IsFinished">
            <inheritdoc />
        </member>
        <member name="M:Sentry.Transaction.#ctor(System.String,System.String)">
            <summary>
            Initializes an instance of <see cref="T:Sentry.Transaction"/>.
            </summary>
        </member>
        <member name="M:Sentry.Transaction.#ctor(Sentry.ITransaction)">
            <summary>
            Initializes an instance of <see cref="T:Sentry.Transaction"/>.
            </summary>
        </member>
        <member name="M:Sentry.Transaction.AddBreadcrumb(Sentry.Breadcrumb)">
            <inheritdoc />
        </member>
        <member name="M:Sentry.Transaction.SetExtra(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Sentry.Transaction.SetTag(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Sentry.Transaction.UnsetTag(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Sentry.Transaction.GetTraceHeader">
            <inheritdoc />
        </member>
        <member name="M:Sentry.Transaction.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc />
        </member>
        <member name="M:Sentry.Transaction.FromJson(System.Text.Json.JsonElement)">
            <summary>
            Parses transaction from JSON.
            </summary>
        </member>
        <member name="T:Sentry.TransactionContext">
            <summary>
            Transaction metadata used for sampling.
            </summary>
        </member>
        <member name="P:Sentry.TransactionContext.Name">
            <inheritdoc />
        </member>
        <member name="P:Sentry.TransactionContext.IsParentSampled">
            <summary>
            Whether the parent transaction of this transaction has been sampled.
            </summary>
        </member>
        <member name="M:Sentry.TransactionContext.#ctor(Sentry.SpanId,System.Nullable{Sentry.SpanId},Sentry.SentryId,System.String,System.String,System.String,System.Nullable{Sentry.SpanStatus},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Initializes an instance of <see cref="T:Sentry.TransactionContext"/>.
            </summary>
        </member>
        <member name="M:Sentry.TransactionContext.#ctor(System.Nullable{Sentry.SpanId},Sentry.SentryId,System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes an instance of <see cref="T:Sentry.TransactionContext"/>.
            </summary>
        </member>
        <member name="M:Sentry.TransactionContext.#ctor(System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes an instance of <see cref="T:Sentry.TransactionContext"/>.
            </summary>
        </member>
        <member name="M:Sentry.TransactionContext.#ctor(System.String,System.String,Sentry.SentryTraceHeader)">
            <summary>
            Initializes an instance of <see cref="T:Sentry.TransactionContext"/>.
            </summary>
        </member>
        <member name="M:Sentry.TransactionContext.#ctor(System.String,System.String)">
            <summary>
            Initializes an instance of <see cref="T:Sentry.TransactionContext"/>.
            </summary>
        </member>
        <member name="T:Sentry.TransactionSamplingContext">
            <summary>
            Context used by a dynamic sampler to determine whether a transaction should be sampled.
            </summary>
        </member>
        <member name="P:Sentry.TransactionSamplingContext.TransactionContext">
            <summary>
            Transaction context.
            </summary>
        </member>
        <member name="P:Sentry.TransactionSamplingContext.CustomSamplingContext">
            <summary>
            Custom data used for sampling.
            </summary>
        </member>
        <member name="M:Sentry.TransactionSamplingContext.#ctor(Sentry.ITransactionContext,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Initializes an instance of <see cref="T:Sentry.TransactionSamplingContext"/>.
            </summary>
        </member>
        <member name="T:Sentry.TransactionTracer">
            <summary>
            Transaction tracer.
            </summary>
        </member>
        <member name="P:Sentry.TransactionTracer.SpanId">
            <inheritdoc />
        </member>
        <member name="P:Sentry.TransactionTracer.ParentSpanId">
            <inheritdoc />
        </member>
        <member name="P:Sentry.TransactionTracer.TraceId">
            <inheritdoc />
        </member>
        <member name="P:Sentry.TransactionTracer.Name">
            <inheritdoc cref="P:Sentry.ITransaction.Name" />
        </member>
        <member name="P:Sentry.TransactionTracer.IsParentSampled">
            <inheritdoc cref="P:Sentry.ITransaction.IsParentSampled" />
        </member>
        <member name="P:Sentry.TransactionTracer.Platform">
            <inheritdoc />
        </member>
        <member name="P:Sentry.TransactionTracer.Release">
            <inheritdoc />
        </member>
        <member name="P:Sentry.TransactionTracer.StartTimestamp">
            <inheritdoc />
        </member>
        <member name="P:Sentry.TransactionTracer.EndTimestamp">
            <inheritdoc />
        </member>
        <member name="P:Sentry.TransactionTracer.Operation">
            <inheritdoc cref="P:Sentry.ISpan.Operation" />
        </member>
        <member name="P:Sentry.TransactionTracer.Description">
            <inheritdoc cref="P:Sentry.ISpan.Description" />
        </member>
        <member name="P:Sentry.TransactionTracer.Status">
            <inheritdoc cref="P:Sentry.ISpan.Status" />
        </member>
        <member name="P:Sentry.TransactionTracer.IsSampled">
            <inheritdoc />
        </member>
        <member name="P:Sentry.TransactionTracer.Level">
            <inheritdoc />
        </member>
        <member name="P:Sentry.TransactionTracer.Request">
            <inheritdoc />
        </member>
        <member name="P:Sentry.TransactionTracer.Contexts">
            <inheritdoc />
        </member>
        <member name="P:Sentry.TransactionTracer.User">
            <inheritdoc />
        </member>
        <member name="P:Sentry.TransactionTracer.Environment">
            <inheritdoc />
        </member>
        <member name="P:Sentry.TransactionTracer.Sdk">
            <inheritdoc />
        </member>
        <member name="P:Sentry.TransactionTracer.Fingerprint">
            <inheritdoc />
        </member>
        <member name="P:Sentry.TransactionTracer.Breadcrumbs">
            <inheritdoc />
        </member>
        <member name="P:Sentry.TransactionTracer.Extra">
            <inheritdoc />
        </member>
        <member name="P:Sentry.TransactionTracer.Tags">
            <inheritdoc />
        </member>
        <member name="P:Sentry.TransactionTracer.Spans">
            <inheritdoc />
        </member>
        <member name="P:Sentry.TransactionTracer.IsFinished">
            <inheritdoc />
        </member>
        <member name="M:Sentry.TransactionTracer.#ctor(Sentry.IHub,System.String,System.String)">
            <summary>
            Initializes an instance of <see cref="T:Sentry.Transaction"/>.
            </summary>
        </member>
        <member name="M:Sentry.TransactionTracer.#ctor(Sentry.IHub,Sentry.ITransactionContext)">
            <summary>
            Initializes an instance of <see cref="T:Sentry.Transaction"/>.
            </summary>
        </member>
        <member name="M:Sentry.TransactionTracer.AddBreadcrumb(Sentry.Breadcrumb)">
            <inheritdoc />
        </member>
        <member name="M:Sentry.TransactionTracer.SetExtra(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Sentry.TransactionTracer.SetTag(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Sentry.TransactionTracer.UnsetTag(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Sentry.TransactionTracer.StartChild(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Sentry.TransactionTracer.Finish">
            <inheritdoc />
        </member>
        <member name="M:Sentry.TransactionTracer.Finish(Sentry.SpanStatus)">
            <inheritdoc />
        </member>
        <member name="M:Sentry.TransactionTracer.Finish(System.Exception,Sentry.SpanStatus)">
            <inheritdoc />
        </member>
        <member name="M:Sentry.TransactionTracer.Finish(System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:Sentry.TransactionTracer.GetLastActiveSpan">
            <inheritdoc />
        </member>
        <member name="M:Sentry.TransactionTracer.GetTraceHeader">
            <inheritdoc />
        </member>
        <member name="T:Sentry.User">
            <summary>
            An interface which describes the authenticated User for a request.
            </summary>
            <see href="https://develop.sentry.dev/sdk/event-payloads/user/"/>
        </member>
        <member name="P:Sentry.User.Email">
            <summary>
            The email address of the user.
            </summary>
            <value>
            The user's email address.
            </value>
        </member>
        <member name="P:Sentry.User.Id">
            <summary>
            The unique ID of the user.
            </summary>
            <value>
            The unique identifier.
            </value>
        </member>
        <member name="P:Sentry.User.IpAddress">
            <summary>
            The IP of the user.
            </summary>
            <value>
            The user's IP address.
            </value>
        </member>
        <member name="P:Sentry.User.Username">
            <summary>
            The username of the user.
            </summary>
            <value>
            The user's username.
            </value>
        </member>
        <member name="P:Sentry.User.Other">
            <summary>
            Additional information about the user.
            </summary>
        </member>
        <member name="M:Sentry.User.Clone">
            <summary>
            Clones the current <see cref="T:Sentry.User"/> instance.
            </summary>
            <returns>The cloned user.</returns>
        </member>
        <member name="M:Sentry.User.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc />
        </member>
        <member name="M:Sentry.User.FromJson(System.Text.Json.JsonElement)">
            <summary>
            Parses from JSON.
            </summary>
        </member>
        <member name="T:Sentry.UserFeedback">
            <summary>
            Sentry User Feedback.
            </summary>
        </member>
        <member name="P:Sentry.UserFeedback.EventId">
            <summary>
            The eventId of the event to which the user feedback is associated.
            </summary>
        </member>
        <member name="P:Sentry.UserFeedback.Name">
            <summary>
            The name of the user.
            </summary>
        </member>
        <member name="P:Sentry.UserFeedback.Email">
            <summary>
            The name of the user.
            </summary>
        </member>
        <member name="P:Sentry.UserFeedback.Comments">
            <summary>
            Comments of the user about what happened.
            </summary>
        </member>
        <member name="M:Sentry.UserFeedback.#ctor(Sentry.SentryId,System.String,System.String,System.String)">
            <summary>
            Initializes an instance of <see cref="T:Sentry.UserFeedback"/>.
            </summary>
        </member>
        <member name="M:Sentry.UserFeedback.WriteTo(System.Text.Json.Utf8JsonWriter)">
            <inheritdoc />
        </member>
        <member name="M:Sentry.UserFeedback.FromJson(System.Text.Json.JsonElement)">
            <summary>
            Parses from JSON.
            </summary>
        </member>
        <member name="T:SentryExceptionExtensions">
            <summary>
            Extends Exception with formatted data that can be used by Sentry SDK.
            </summary>
        </member>
        <member name="M:SentryExceptionExtensions.AddSentryTag(System.Exception,System.String,System.String)">
            <summary>
            Set a Sentry's Tag to the Exception.
            </summary>
            <param name="ex">The exception.</param>
            <param name="name">The name of the tag.</param>
            <param name="value">The value of the key.</param>
        </member>
        <member name="M:SentryExceptionExtensions.AddSentryContext(System.Exception,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Set a Sentry's structured Context to the Exception.
            </summary>
            <param name="ex">The exception.</param>
            <param name="name">The context name.</param>
            <param name="data">The context data.</param>
        </member>
        <member name="M:System.Diagnostics.EnhancedStackFrame.GetFileColumnNumber">
            <summary>
                 Gets the column number in the file that contains the code that is executing. 
                 This information is typically extracted from the debugging symbols for the executable.
            </summary>
            <returns>The file column number, or 0 (zero) if the file column number cannot be determined.</returns>
        </member>
        <member name="M:System.Diagnostics.EnhancedStackFrame.GetFileLineNumber">
            <summary>
                Gets the line number in the file that contains the code that is executing. 
                This information is typically extracted from the debugging symbols for the executable.
            </summary>
            <returns>The file line number, or 0 (zero) if the file line number cannot be determined.</returns>
        </member>
        <member name="M:System.Diagnostics.EnhancedStackFrame.GetFileName">
            <summary>
                Gets the file name that contains the code that is executing. 
                This information is typically extracted from the debugging symbols for the executable.
            </summary>
            <returns>The file name, or null if the file name cannot be determined.</returns>
        </member>
        <member name="M:System.Diagnostics.EnhancedStackFrame.GetILOffset">
            <summary>
               Gets the offset from the start of the Microsoft intermediate language (MSIL)
               code for the method that is executing. This offset might be an approximation
               depending on whether or not the just-in-time (JIT) compiler is generating debugging
               code. The generation of this debugging information is controlled by the System.Diagnostics.DebuggableAttribute.
            </summary>
            <returns>The offset from the start of the MSIL code for the method that is executing.</returns>
        </member>
        <member name="M:System.Diagnostics.EnhancedStackFrame.GetMethod">
            <summary>
                Gets the method in which the frame is executing.
            </summary>
            <returns>The method in which the frame is executing.</returns>
        </member>
        <member name="M:System.Diagnostics.EnhancedStackFrame.GetNativeOffset">
            <summary>
                Gets the offset from the start of the native just-in-time (JIT)-compiled code
                for the method that is being executed. The generation of this debugging information
                is controlled by the System.Diagnostics.DebuggableAttribute class.
            </summary>
            <returns>The offset from the start of the JIT-compiled code for the method that is being executed.</returns>
        </member>
        <member name="M:System.Diagnostics.EnhancedStackFrame.ToString">
            <summary>
                Builds a readable representation of the stack trace.
            </summary>
            <returns>A readable representation of the stack trace.</returns>
        </member>
        <member name="P:System.Diagnostics.EnhancedStackTrace.FrameCount">
            <summary>
            Gets the number of frames in the stack trace.
            </summary>
            <returns>The number of frames in the stack trace.</returns>
        </member>
        <member name="M:System.Diagnostics.EnhancedStackTrace.GetFrame(System.Int32)">
            <summary>
            Gets the specified stack frame.
            </summary>
            <param name="index">The index of the stack frame requested.</param>
            <returns>The specified stack frame.</returns>
        </member>
        <member name="M:System.Diagnostics.EnhancedStackTrace.GetFrames">
            <summary>
                Returns a copy of all stack frames in the current stack trace.
            </summary>
            <returns>
                An array of type System.Diagnostics.StackFrame representing the function calls
                in the stack trace.
            </returns>
        </member>
        <member name="M:System.Diagnostics.EnhancedStackTrace.ToString">
            <summary>
            Builds a readable representation of the stack trace.
            </summary>
            <returns>A readable representation of the stack trace.</returns>
        </member>
        <member name="M:System.Diagnostics.EnhancedStackTrace.TryGetFullPath(System.String)">
            <summary>
            Tries to convert a given <paramref name="filePath"/> to a full path.
            Returns original value if the conversion isn't possible or a given path is relative.
            </summary>
        </member>
        <member name="M:System.Diagnostics.ExceptionExtensions.Demystify``1(``0)">
            <summary>
            Demystifies the given <paramref name="exception"/> and tracks the original stack traces for the whole exception tree.
            </summary>
        </member>
        <member name="M:System.Diagnostics.ExceptionExtensions.ToStringDemystified(System.Exception)">
            <summary>
            Gets demystified string representation of the <paramref name="exception"/>.
            </summary>
            <remarks>
            <see cref="M:System.Diagnostics.ExceptionExtensions.Demystify``1(``0)"/> method mutates the exception instance that can cause
            issues if a system relies on the stack trace be in the specific form.
            Unlike <see cref="M:System.Diagnostics.ExceptionExtensions.Demystify``1(``0)"/> this method is pure. It calls <see cref="M:System.Diagnostics.ExceptionExtensions.Demystify``1(``0)"/> first,
            computes a demystified string representation and then restores the original state of the exception back.
            </remarks>
        </member>
        <member name="T:System.Diagnostics.Internal.ReflectionHelper">
            <summary>
            A helper class that contains utilities methods for dealing with reflection.
            </summary>
        </member>
        <member name="M:System.Diagnostics.Internal.ReflectionHelper.IsValueTuple(System.Type)">
            <summary>
            Returns true if the <paramref name="type"/> is a value tuple type.
            </summary>
        </member>
        <member name="M:System.Diagnostics.Internal.ReflectionHelper.IsTupleElementNameAttribue(System.Attribute)">
            <summary>
            Returns true if the given <paramref name="attribute"/> is of type <code>TupleElementNameAttribute</code>.
            </summary>
            <remarks>
            To avoid compile-time depencency hell with System.ValueTuple, this method uses reflection and not checks statically that 
            the given <paramref name="attribute"/> is <code>TupleElementNameAttribute</code>.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.Internal.ReflectionHelper.GetTransformerNames(System.Attribute)">
            <summary>
            Returns 'TransformNames' property value from a given <paramref name="attribute"/>.
            </summary>
            <remarks>
            To avoid compile-time depencency hell with System.ValueTuple, this method uses reflection 
            instead of casting the attribute to a specific type.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.TypeNameHelper.GetTypeDisplayName(System.Type,System.Boolean,System.Boolean)">
            <summary>
            Pretty print a type name.
            </summary>
            <param name="type">The <see cref="T:System.Type"/>.</param>
            <param name="fullName"><c>true</c> to print a fully qualified name.</param>
            <param name="includeGenericParameterNames"><c>true</c> to include generic parameter names.</param>
            <returns>The pretty printed type name.</returns>
        </member>
        <member name="M:System.Diagnostics.TypeNameHelper.GetTypeNameForGenericType(System.Type)">
            <summary>
            Returns a name of given generic type without '`'.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.Enumerable.EnumerableIList`1.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:System.Collections.Generic.Enumerable.EnumerableIList`1.Count">
            <inheritdoc />
        </member>
        <member name="P:System.Collections.Generic.Enumerable.EnumerableIList`1.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="M:System.Collections.Generic.Enumerable.EnumerableIList`1.Add(`0)">
            <inheritdoc />
        </member>
        <member name="M:System.Collections.Generic.Enumerable.EnumerableIList`1.Clear">
            <inheritdoc />
        </member>
        <member name="M:System.Collections.Generic.Enumerable.EnumerableIList`1.Contains(`0)">
            <inheritdoc />
        </member>
        <member name="M:System.Collections.Generic.Enumerable.EnumerableIList`1.CopyTo(`0[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:System.Collections.Generic.Enumerable.EnumerableIList`1.IndexOf(`0)">
            <inheritdoc />
        </member>
        <member name="M:System.Collections.Generic.Enumerable.EnumerableIList`1.Insert(System.Int32,`0)">
            <inheritdoc />
        </member>
        <member name="M:System.Collections.Generic.Enumerable.EnumerableIList`1.Remove(`0)">
            <inheritdoc />
        </member>
        <member name="M:System.Collections.Generic.Enumerable.EnumerableIList`1.RemoveAt(System.Int32)">
            <inheritdoc />
        </member>
    </members>
</doc>
